{"componentChunkName":"component---node-modules-gatsby-theme-woly-src-templates-usage-js","path":"/styleguide/html/data-attribute","result":{"pageContext":{"package":"styleguide","category":"html","name":"data-attribute","pages":[{"type":"data-attribute","meta":{"name":"data-attribute","category":"html","package":"styleguide"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Styleguide for data-attributes\"), mdx(\"p\", null, \"Data-attributes allow us to store extra information on standard, semantic HTML elements.\\nThe data attribute can also be used for styling.\\nYou can access them from CSS to add styles to the tag that have specific data-attribute.\"), mdx(\"p\", null, \"It's simpler and cleaner to write data attributes as data-name, where a name is a concrete name of a data attribute.\"), mdx(\"p\", null, \"Use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"data-element\"), \" attribute for styling (it is semantic and consistent):\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\"\n  }, \"<div data-element=\\\"input\\\"></div>\\n\")), mdx(\"p\", null, \"If you have several values of component states that you need to pass to a data attribute, make data attribute more unique with adding a name to data attribute.\\nYou can do it in this way:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\"\n  }, \"data-name=\\\"value\\\"\\n\")), mdx(\"p\", null, \"For example:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\"\n  }, \"<div data-direction=\\\"horizontal\\\">horizontal block</div>\\n\\n<div data-direction=\\\"vertical\\\">vertical block</div>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}]}},"staticQueryHashes":["1297603051"]}