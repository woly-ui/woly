{"componentChunkName":"component---node-modules-gatsby-theme-woly-src-templates-usage-js","path":"/woly/atoms/input","result":{"pageContext":{"package":"woly","category":"atoms","name":"input","pages":[{"type":"state","meta":{"name":"input","category":"atoms","package":"woly"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(GenerateInputMap, {\n    mdxType: \"GenerateInputMap\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<GenerateInputMap />\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"},{"type":"usage","meta":{"name":"input","category":"atoms","package":"woly"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Input\"), \" is a field to accept data from the user. Input is used to create form fields that accept user input.\\nThey typically appear in forms and dialogs.\"), mdx(\"p\", null, \"Inputs requiring certain data formats such as numbers, e-mail addresses or passwords are declared accordingly.\\nThis makes it easier for the user to enter information using a virtual keyboard.\"), mdx(\"p\", null, \"When a input is active or contains an error, the input\\u2019s border color and thickness vary.\"), mdx(\"h2\", null, \"Placeholder text (Hint text)\"), mdx(\"p\", null, \"Placeholder text rests in the input field until the user starts entering text.\\nIt may contain an action or an example, such as a phone number or email address.\"), mdx(\"h2\", null, \"Helper text\"), mdx(\"p\", null, \"Helper text gives context about a field\\u2019s input, such as how the input will be used.\"), mdx(\"p\", null, \"It should be visible either persistently or only on focus.\"), mdx(\"p\", null, \"Specs:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Left justified\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"On a single line if possible, or with text wrapping (if multiple lines)\")), mdx(\"h2\", null, \"Error message\"), mdx(\"p\", null, \"When input isn\\u2019t accepted, text fields can display an error message below the input line, with instructions on how to fix the error.\\nUntil the error is fixed, the error replaces the helper text.\"), mdx(\"p\", null, \"An error message should appear on a single line, if possible.\"), mdx(\"p\", null, \"##Character or word counter\"), mdx(\"p\", null, \"Use character or word counters where there is a character or word limit.\"), mdx(\"p\", null, \"Specs:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Right justified\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Displayed as a ratio of characters used, and the character limit (formatted as: characters used / character limit)\")), mdx(\"h3\", null, \"Example\"), mdx(Playground, {\n    mdxType: \"Playground\"\n  }, mdx(Form, {\n    autoComplete: \"false\",\n    mdxType: \"Form\"\n  }, mdx(Input, {\n    name: \"name\",\n    onChange: function onChange(event) {\n      return console.info('On input change');\n    },\n    placeholder: \"Enter your name here\",\n    type: \"text\",\n    priority: \"default\",\n    mdxType: \"Input\"\n  }))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Playground>\\n  <Form autoComplete=\\\"false\\\">\\n    <Input\\n      name=\\\"name\\\"\\n      onChange={(event) => console.info('On input change')}\\n      placeholder=\\\"Enter your name here\\\"\\n      type=\\\"text\\\"\\n      priority=\\\"default\\\"\\n    />\\n  </Form>\\n</Playground>\\n\")), mdx(\"h3\", null, \"Disabled\"), mdx(\"p\", null, \"Disabled text fields are uneditable. They have less opacity so that they appear less tappable.\"), mdx(Playground, {\n    direction: \"vertical\",\n    mdxType: \"Playground\"\n  }, mdx(Form, {\n    autoComplete: \"false\",\n    mdxType: \"Form\"\n  }, mdx(Input, {\n    disabled: true,\n    name: \"name\",\n    onChange: function onChange(event) {\n      return console.info('On input change');\n    },\n    placeholder: \"Enter your name here\",\n    type: \"text\",\n    priority: \"primary\",\n    mdxType: \"Input\"\n  }), mdx(Input, {\n    disabled: true,\n    leftIcon: mdx(IconInfo, {\n      mdxType: \"IconInfo\"\n    }),\n    name: \"name\",\n    onChange: function onChange(event) {\n      return console.info('On input change');\n    },\n    placeholder: \"Enter your name here\",\n    type: \"text\",\n    priority: \"primary\",\n    mdxType: \"Input\"\n  }), mdx(Input, {\n    disabled: true,\n    leftIcon: mdx(IconInfo, {\n      mdxType: \"IconInfo\"\n    }),\n    name: \"name\",\n    onChange: function onChange(event) {\n      return console.info('On input change');\n    },\n    value: \"Maria Ivanova\",\n    type: \"text\",\n    priority: \"primary\",\n    mdxType: \"Input\"\n  }))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Playground direction=\\\"vertical\\\">\\n  <Form autoComplete=\\\"false\\\">\\n    <Input\\n      disabled\\n      name=\\\"name\\\"\\n      onChange={(event) => console.info('On input change')}\\n      placeholder=\\\"Enter your name here\\\"\\n      type=\\\"text\\\"\\n      priority=\\\"primary\\\"\\n    />\\n    <Input\\n      disabled\\n      leftIcon={<IconInfo />}\\n      name=\\\"name\\\"\\n      onChange={(event) => console.info('On input change')}\\n      placeholder=\\\"Enter your name here\\\"\\n      type=\\\"text\\\"\\n      priority=\\\"primary\\\"\\n    />\\n    <Input\\n      disabled\\n      leftIcon={<IconInfo />}\\n      name=\\\"name\\\"\\n      onChange={(event) => console.info('On input change')}\\n      value=\\\"Maria Ivanova\\\"\\n      type=\\\"text\\\"\\n      priority=\\\"primary\\\"\\n    />\\n  </Form>\\n</Playground>\\n\")), mdx(\"h3\", null, \"Icons\"), mdx(\"p\", null, \"Inputs can be combined with an icon on the left side or the right. Use icons on the both sides is not recommended.\"), mdx(Playground, {\n    direction: \"vertical\",\n    size: \"L\",\n    mdxType: \"Playground\"\n  }, mdx(Form, {\n    autoComplete: \"false\",\n    mdxType: \"Form\"\n  }, mdx(Input, {\n    leftIcon: mdx(IconInfo, {\n      mdxType: \"IconInfo\"\n    }),\n    type: \"text\",\n    name: \"name\",\n    placeholder: \"Enter your name here\",\n    priority: \"primary\",\n    onChange: function onChange(event) {\n      return console.info('On input change');\n    },\n    mdxType: \"Input\"\n  }), mdx(Input, {\n    type: \"text\",\n    name: \"name\",\n    placeholder: \"Enter your name here\",\n    priority: \"primary\",\n    onChange: function onChange(event) {\n      return console.info('On input change');\n    },\n    rightIcon: mdx(IconInfo, {\n      mdxType: \"IconInfo\"\n    }),\n    mdxType: \"Input\"\n  }), mdx(Input, {\n    leftIcon: mdx(IconInfo, {\n      mdxType: \"IconInfo\"\n    }),\n    type: \"text\",\n    name: \"name\",\n    placeholder: \"Enter your name here\",\n    priority: \"primary\",\n    onChange: function onChange(event) {\n      return console.info('On input change');\n    },\n    rightIcon: mdx(IconInfo, {\n      mdxType: \"IconInfo\"\n    }),\n    mdxType: \"Input\"\n  }))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Playground direction=\\\"vertical\\\" size=\\\"L\\\">\\n  <Form autoComplete=\\\"false\\\">\\n    <Input\\n      leftIcon={<IconInfo />}\\n      type=\\\"text\\\"\\n      name=\\\"name\\\"\\n      placeholder=\\\"Enter your name here\\\"\\n      priority=\\\"primary\\\"\\n      onChange={(event) => console.info('On input change')}\\n    />\\n    <Input\\n      type=\\\"text\\\"\\n      name=\\\"name\\\"\\n      placeholder=\\\"Enter your name here\\\"\\n      priority=\\\"primary\\\"\\n      onChange={(event) => console.info('On input change')}\\n      rightIcon={<IconInfo />}\\n    />\\n    <Input\\n      leftIcon={<IconInfo />}\\n      type=\\\"text\\\"\\n      name=\\\"name\\\"\\n      placeholder=\\\"Enter your name here\\\"\\n      priority=\\\"primary\\\"\\n      onChange={(event) => console.info('On input change')}\\n      rightIcon={<IconInfo />}\\n    />\\n  </Form>\\n</Playground>\\n\")), mdx(\"p\", null, \"Icons can also be touch targets for nested components.\"), mdx(Playground, {\n    size: \"L\",\n    direction: \"vertical\",\n    mdxType: \"Playground\"\n  }, mdx(Form, {\n    autoComplete: \"false\",\n    mdxType: \"Form\"\n  }, mdx(Input, {\n    rightIcon: mdx(block.S, null, mdx(ButtonIcon, {\n      icon: mdx(IconInfo, {\n        mdxType: \"IconInfo\"\n      }),\n      onClick: function onClick() {\n        return console.info('ButtonIcon clicked');\n      },\n      priority: \"primary\",\n      mdxType: \"ButtonIcon\"\n    })),\n    type: \"text\",\n    name: \"name\",\n    placeholder: \"Enter your name here\",\n    onChange: function onChange(event) {\n      return console.info('On input change');\n    },\n    priority: \"primary\",\n    mdxType: \"Input\"\n  }), mdx(Input, {\n    leftIcon: mdx(IconInfo, {\n      mdxType: \"IconInfo\"\n    }),\n    type: \"text\",\n    name: \"name\",\n    placeholder: \"Enter your name here\",\n    onChange: function onChange(event) {\n      return console.info('On input change');\n    },\n    priority: \"primary\",\n    rightIcon: mdx(block.S, null, mdx(ButtonIcon, {\n      icon: mdx(IconInfo, {\n        mdxType: \"IconInfo\"\n      }),\n      onClick: function onClick() {\n        return console.info('ButtonIcon clicked');\n      },\n      priority: \"primary\",\n      mdxType: \"ButtonIcon\"\n    })),\n    mdxType: \"Input\"\n  }))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Playground size=\\\"L\\\" direction=\\\"vertical\\\">\\n  <Form autoComplete=\\\"false\\\">\\n    <Input\\n      rightIcon={\\n        <block.S>\\n          <ButtonIcon\\n            icon={<IconInfo />}\\n            onClick={() => console.info('ButtonIcon clicked')}\\n            priority=\\\"primary\\\"\\n          />\\n        </block.S>\\n      }\\n      type=\\\"text\\\"\\n      name=\\\"name\\\"\\n      placeholder=\\\"Enter your name here\\\"\\n      onChange={(event) => console.info('On input change')}\\n      priority=\\\"primary\\\"\\n    />\\n    <Input\\n      leftIcon={<IconInfo />}\\n      type=\\\"text\\\"\\n      name=\\\"name\\\"\\n      placeholder=\\\"Enter your name here\\\"\\n      onChange={(event) => console.info('On input change')}\\n      priority=\\\"primary\\\"\\n      rightIcon={\\n        <block.S>\\n          <ButtonIcon\\n            icon={<IconInfo />}\\n            onClick={() => console.info('ButtonIcon clicked')}\\n            priority=\\\"primary\\\"\\n          />\\n        </block.S>\\n      }\\n    />\\n  </Form>\\n</Playground>\\n\")), mdx(\"h3\", null, \"Priorities\"), mdx(\"p\", null, \"Primary and secondary priorities are should be used to focus user attention.\"), mdx(Playground, {\n    direction: \"vertical\",\n    mdxType: \"Playground\"\n  }, mdx(Form, {\n    autoComplete: \"false\",\n    mdxType: \"Form\"\n  }, mdx(Input, {\n    leftIcon: mdx(IconInfo, {\n      mdxType: \"IconInfo\"\n    }),\n    name: \"name\",\n    onChange: function onChange(event) {\n      return console.info('On input change');\n    },\n    placeholder: \"Primary input\",\n    type: \"text\",\n    value: \"Primary\",\n    priority: \"primary\",\n    mdxType: \"Input\"\n  }), mdx(Input, {\n    leftIcon: mdx(IconInfo, {\n      mdxType: \"IconInfo\"\n    }),\n    type: \"text\",\n    name: \"name\",\n    value: \"Secondary\",\n    placeholder: \"Secondary input\",\n    priority: \"secondary\",\n    onChange: function onChange(event) {\n      return console.info('On input change');\n    },\n    mdxType: \"Input\"\n  }))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Playground direction=\\\"vertical\\\">\\n  <Form autoComplete=\\\"false\\\">\\n    <Input\\n      leftIcon={<IconInfo />}\\n      name=\\\"name\\\"\\n      onChange={(event) => console.info('On input change')}\\n      placeholder=\\\"Primary input\\\"\\n      type=\\\"text\\\"\\n      value=\\\"Primary\\\"\\n      priority=\\\"primary\\\"\\n    />\\n    <Input\\n      leftIcon={<IconInfo />}\\n      type=\\\"text\\\"\\n      name=\\\"name\\\"\\n      value=\\\"Secondary\\\"\\n      placeholder=\\\"Secondary input\\\"\\n      priority=\\\"secondary\\\"\\n      onChange={(event) => console.info('On input change')}\\n    />\\n  </Form>\\n</Playground>\\n\")), mdx(\"p\", null, \"Error priority can be used to focus user attention on error.\"), mdx(Playground, {\n    mdxType: \"Playground\"\n  }, mdx(Form, {\n    autoComplete: \"false\",\n    mdxType: \"Form\"\n  }, mdx(Input, {\n    leftIcon: mdx(IconInfo, {\n      mdxType: \"IconInfo\"\n    }),\n    name: \"name\",\n    onChange: function onChange(event) {\n      return console.info('On input change');\n    },\n    placeholder: \"Error input\",\n    type: \"text\",\n    priority: \"danger\",\n    mdxType: \"Input\"\n  }))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Playground>\\n  <Form autoComplete=\\\"false\\\">\\n    <Input\\n      leftIcon={<IconInfo />}\\n      name=\\\"name\\\"\\n      onChange={(event) => console.info('On input change')}\\n      placeholder=\\\"Error input\\\"\\n      type=\\\"text\\\"\\n      priority=\\\"danger\\\"\\n    />\\n  </Form>\\n</Playground>\\n\")), mdx(\"h3\", null, \"Sizes\"), mdx(\"p\", null, \"Size controlled by the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"component-level\"), \" block property not from the props.\"), mdx(Playground, {\n    direction: \"vertical\",\n    mdxType: \"Playground\"\n  }, mdx(Form, {\n    autoComplete: \"false\",\n    mdxType: \"Form\"\n  }, mdx(Input, {\n    disabled: true,\n    name: \"name\",\n    onChange: function onChange(event) {\n      return console.info('On input change');\n    },\n    placeholder: \"Enter your name here\",\n    type: \"text\",\n    priority: \"primary\",\n    mdxType: \"Input\"\n  }), mdx(Input, {\n    disabled: true,\n    leftIcon: mdx(IconInfo, {\n      mdxType: \"IconInfo\"\n    }),\n    name: \"name\",\n    onChange: function onChange(event) {\n      return console.info('On input change');\n    },\n    placeholder: \"Enter your name here\",\n    type: \"text\",\n    priority: \"primary\",\n    mdxType: \"Input\"\n  }))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Playground direction=\\\"vertical\\\">\\n  <Form autoComplete=\\\"false\\\">\\n    <Input\\n      disabled\\n      name=\\\"name\\\"\\n      onChange={(event) => console.info('On input change')}\\n      placeholder=\\\"Enter your name here\\\"\\n      type=\\\"text\\\"\\n      priority=\\\"primary\\\"\\n    />\\n    <Input\\n      disabled\\n      leftIcon={<IconInfo />}\\n      name=\\\"name\\\"\\n      onChange={(event) => console.info('On input change')}\\n      placeholder=\\\"Enter your name here\\\"\\n      type=\\\"text\\\"\\n      priority=\\\"primary\\\"\\n    />\\n  </Form>\\n</Playground>\\n\")), mdx(\"h3\", null, \"Icons\"), mdx(\"p\", null, \"Inputs can be combined with an icon on the left side or the right. Use icons on the both sides is not recommended.\"), mdx(Playground, {\n    direction: \"vertical\",\n    size: \"L\",\n    mdxType: \"Playground\"\n  }, mdx(Form, {\n    autoComplete: \"false\",\n    mdxType: \"Form\"\n  }, mdx(Input, {\n    leftIcon: mdx(IconInfo, {\n      mdxType: \"IconInfo\"\n    }),\n    type: \"text\",\n    name: \"name\",\n    placeholder: \"Enter your name here\",\n    priority: \"primary\",\n    onChange: function onChange(event) {\n      return console.info('On input change');\n    },\n    mdxType: \"Input\"\n  }), mdx(Input, {\n    type: \"text\",\n    name: \"name\",\n    placeholder: \"Enter your name here\",\n    priority: \"primary\",\n    onChange: function onChange(event) {\n      return console.info('On input change');\n    },\n    rightIcon: mdx(IconInfo, {\n      mdxType: \"IconInfo\"\n    }),\n    mdxType: \"Input\"\n  }), mdx(Input, {\n    leftIcon: mdx(IconInfo, {\n      mdxType: \"IconInfo\"\n    }),\n    type: \"text\",\n    name: \"name\",\n    placeholder: \"Enter your name here\",\n    priority: \"primary\",\n    onChange: function onChange(event) {\n      return console.info('On input change');\n    },\n    rightIcon: mdx(IconInfo, {\n      mdxType: \"IconInfo\"\n    }),\n    mdxType: \"Input\"\n  }))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Playground direction=\\\"vertical\\\" size=\\\"L\\\">\\n  <Form autoComplete=\\\"false\\\">\\n    <Input\\n      leftIcon={<IconInfo />}\\n      type=\\\"text\\\"\\n      name=\\\"name\\\"\\n      placeholder=\\\"Enter your name here\\\"\\n      priority=\\\"primary\\\"\\n      onChange={(event) => console.info('On input change')}\\n    />\\n    <Input\\n      type=\\\"text\\\"\\n      name=\\\"name\\\"\\n      placeholder=\\\"Enter your name here\\\"\\n      priority=\\\"primary\\\"\\n      onChange={(event) => console.info('On input change')}\\n      rightIcon={<IconInfo />}\\n    />\\n    <Input\\n      leftIcon={<IconInfo />}\\n      type=\\\"text\\\"\\n      name=\\\"name\\\"\\n      placeholder=\\\"Enter your name here\\\"\\n      priority=\\\"primary\\\"\\n      onChange={(event) => console.info('On input change')}\\n      rightIcon={<IconInfo />}\\n    />\\n  </Form>\\n</Playground>\\n\")), mdx(\"p\", null, \"Icons can also be touch targets for nested components.\"), mdx(Playground, {\n    size: \"L\",\n    direction: \"vertical\",\n    mdxType: \"Playground\"\n  }, mdx(Form, {\n    autoComplete: \"false\",\n    mdxType: \"Form\"\n  }, mdx(Input, {\n    rightIcon: mdx(block.S, null, mdx(ButtonIcon, {\n      icon: mdx(IconInfo, {\n        mdxType: \"IconInfo\"\n      }),\n      onClick: function onClick() {\n        return console.info('ButtonIcon clicked');\n      },\n      priority: \"primary\",\n      mdxType: \"ButtonIcon\"\n    })),\n    type: \"text\",\n    name: \"name\",\n    placeholder: \"Enter your name here\",\n    onChange: function onChange(event) {\n      return console.info('On input change');\n    },\n    priority: \"primary\",\n    mdxType: \"Input\"\n  }), mdx(Input, {\n    leftIcon: mdx(IconInfo, {\n      mdxType: \"IconInfo\"\n    }),\n    type: \"text\",\n    name: \"name\",\n    placeholder: \"Enter your name here\",\n    onChange: function onChange(event) {\n      return console.info('On input change');\n    },\n    priority: \"primary\",\n    rightIcon: mdx(block.S, null, mdx(ButtonIcon, {\n      icon: mdx(IconInfo, {\n        mdxType: \"IconInfo\"\n      }),\n      onClick: function onClick() {\n        return console.info('ButtonIcon clicked');\n      },\n      priority: \"primary\",\n      mdxType: \"ButtonIcon\"\n    })),\n    mdxType: \"Input\"\n  }))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Playground size=\\\"L\\\" direction=\\\"vertical\\\">\\n  <Form autoComplete=\\\"false\\\">\\n    <Input\\n      rightIcon={\\n        <block.S>\\n          <ButtonIcon\\n            icon={<IconInfo />}\\n            onClick={() => console.info('ButtonIcon clicked')}\\n            priority=\\\"primary\\\"\\n          />\\n        </block.S>\\n      }\\n      type=\\\"text\\\"\\n      name=\\\"name\\\"\\n      placeholder=\\\"Enter your name here\\\"\\n      onChange={(event) => console.info('On input change')}\\n      priority=\\\"primary\\\"\\n    />\\n    <Input\\n      leftIcon={<IconInfo />}\\n      type=\\\"text\\\"\\n      name=\\\"name\\\"\\n      placeholder=\\\"Enter your name here\\\"\\n      onChange={(event) => console.info('On input change')}\\n      priority=\\\"primary\\\"\\n      rightIcon={\\n        <block.S>\\n          <ButtonIcon\\n            icon={<IconInfo />}\\n            onClick={() => console.info('ButtonIcon clicked')}\\n            priority=\\\"primary\\\"\\n          />\\n        </block.S>\\n      }\\n    />\\n  </Form>\\n</Playground>\\n\")), mdx(\"h3\", null, \"Priorities\"), mdx(\"p\", null, \"Primary and secondary priorities are should be used to focus user attention.\"), mdx(Playground, {\n    direction: \"vertical\",\n    mdxType: \"Playground\"\n  }, mdx(Form, {\n    autoComplete: \"false\",\n    mdxType: \"Form\"\n  }, mdx(Input, {\n    leftIcon: mdx(IconInfo, {\n      mdxType: \"IconInfo\"\n    }),\n    name: \"name\",\n    onChange: function onChange(event) {\n      return console.info('On input change');\n    },\n    placeholder: \"Primary input\",\n    type: \"text\",\n    value: \"Primary\",\n    priority: \"primary\",\n    mdxType: \"Input\"\n  }), mdx(Input, {\n    leftIcon: mdx(IconInfo, {\n      mdxType: \"IconInfo\"\n    }),\n    type: \"text\",\n    name: \"name\",\n    value: \"Secondary\",\n    placeholder: \"Secondary input\",\n    priority: \"secondary\",\n    onChange: function onChange(event) {\n      return console.info('On input change');\n    },\n    mdxType: \"Input\"\n  }))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Playground direction=\\\"vertical\\\">\\n  <Form autoComplete=\\\"false\\\">\\n    <Input\\n      leftIcon={<IconInfo />}\\n      name=\\\"name\\\"\\n      onChange={(event) => console.info('On input change')}\\n      placeholder=\\\"Primary input\\\"\\n      type=\\\"text\\\"\\n      value=\\\"Primary\\\"\\n      priority=\\\"primary\\\"\\n    />\\n    <Input\\n      leftIcon={<IconInfo />}\\n      type=\\\"text\\\"\\n      name=\\\"name\\\"\\n      value=\\\"Secondary\\\"\\n      placeholder=\\\"Secondary input\\\"\\n      priority=\\\"secondary\\\"\\n      onChange={(event) => console.info('On input change')}\\n    />\\n  </Form>\\n</Playground>\\n\")), mdx(\"p\", null, \"Error priority can be used to focus user attention on error.\"), mdx(Playground, {\n    mdxType: \"Playground\"\n  }, mdx(Form, {\n    autoComplete: \"false\",\n    mdxType: \"Form\"\n  }, mdx(Input, {\n    leftIcon: mdx(IconInfo, {\n      mdxType: \"IconInfo\"\n    }),\n    name: \"name\",\n    onChange: function onChange(event) {\n      return console.info('On input change');\n    },\n    placeholder: \"Error input\",\n    type: \"text\",\n    value: \"Error\",\n    priority: \"danger\",\n    mdxType: \"Input\"\n  }))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Playground>\\n  <Form autoComplete=\\\"false\\\">\\n    <Input\\n      leftIcon={<IconInfo />}\\n      name=\\\"name\\\"\\n      onChange={(event) => console.info('On input change')}\\n      placeholder=\\\"Error input\\\"\\n      type=\\\"text\\\"\\n      value=\\\"Error\\\"\\n      priority=\\\"danger\\\"\\n    />\\n  </Form>\\n</Playground>\\n\")), mdx(\"h3\", null, \"Sizes\"), mdx(\"p\", null, \"Size controlled by the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"component-level\"), \" block property not from the props.\"), mdx(Playground, {\n    direction: \"vertical\",\n    mdxType: \"Playground\"\n  }, mdx(Form, {\n    autoComplete: \"false\",\n    mdxType: \"Form\"\n  }, mdx(block.S, null, mdx(Input, {\n    name: \"name\",\n    onChange: function onChange(event) {\n      return console.info('On input change');\n    },\n    placeholder: \"Enter your name here\",\n    type: \"text\",\n    priority: \"primary\",\n    mdxType: \"Input\"\n  })), mdx(block.M, null, mdx(Input, {\n    name: \"name\",\n    onChange: function onChange(event) {\n      return console.info('On input change');\n    },\n    placeholder: \"Enter your name here\",\n    type: \"text\",\n    priority: \"primary\",\n    mdxType: \"Input\"\n  })), mdx(block.L, null, mdx(Input, {\n    name: \"name\",\n    onChange: function onChange(event) {\n      return console.info('On input change');\n    },\n    placeholder: \"Enter your name here\",\n    type: \"text\",\n    priority: \"primary\",\n    mdxType: \"Input\"\n  })), mdx(block.XL, null, mdx(Input, {\n    name: \"name\",\n    onChange: function onChange(event) {\n      return console.info('On input change');\n    },\n    placeholder: \"Enter your name here\",\n    type: \"text\",\n    priority: \"primary\",\n    mdxType: \"Input\"\n  })), mdx(block.H, null, mdx(Input, {\n    name: \"name\",\n    onChange: function onChange(event) {\n      return console.info('On input change');\n    },\n    placeholder: \"Enter your name here\",\n    type: \"text\",\n    priority: \"primary\",\n    mdxType: \"Input\"\n  })))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Playground direction=\\\"vertical\\\">\\n  <Form autoComplete=\\\"false\\\">\\n    <block.S>\\n      <Input\\n        name=\\\"name\\\"\\n        onChange={(event) => console.info('On input change')}\\n        placeholder=\\\"Enter your name here\\\"\\n        type=\\\"text\\\"\\n        priority=\\\"primary\\\"\\n      />\\n    </block.S>\\n    <block.M>\\n      <Input\\n        name=\\\"name\\\"\\n        onChange={(event) => console.info('On input change')}\\n        placeholder=\\\"Enter your name here\\\"\\n        type=\\\"text\\\"\\n        priority=\\\"primary\\\"\\n      />\\n    </block.M>\\n    <block.L>\\n      <Input\\n        name=\\\"name\\\"\\n        onChange={(event) => console.info('On input change')}\\n        placeholder=\\\"Enter your name here\\\"\\n        type=\\\"text\\\"\\n        priority=\\\"primary\\\"\\n      />\\n    </block.L>\\n    <block.XL>\\n      <Input\\n        name=\\\"name\\\"\\n        onChange={(event) => console.info('On input change')}\\n        placeholder=\\\"Enter your name here\\\"\\n        type=\\\"text\\\"\\n        priority=\\\"primary\\\"\\n      />\\n    </block.XL>\\n    <block.H>\\n      <Input\\n        name=\\\"name\\\"\\n        onChange={(event) => console.info('On input change')}\\n        placeholder=\\\"Enter your name here\\\"\\n        type=\\\"text\\\"\\n        priority=\\\"primary\\\"\\n      />\\n    </block.H>\\n  </Form>\\n</Playground>\\n\")), mdx(\"h3\", null, \"Container\"), mdx(\"p\", null, \"Inputs can be placed inside the container. Input width is equal to container size.\"), mdx(Playground, {\n    direction: \"vertical\",\n    mdxType: \"Playground\"\n  }, mdx(Form, {\n    autoComplete: \"false\",\n    mdxType: \"Form\"\n  }, mdx(block.L, null, mdx(Input, {\n    leftIcon: mdx(IconInfo, {\n      mdxType: \"IconInfo\"\n    }),\n    type: \"text\",\n    name: \"name\",\n    value: \"Primary\",\n    placeholder: \"Enter your name here\",\n    priority: \"primary\",\n    onChange: function onChange(event) {\n      return console.info('On input change');\n    },\n    mdxType: \"Input\"\n  })), mdx(block.L, null, mdx(Input, {\n    leftIcon: mdx(IconInfo, {\n      mdxType: \"IconInfo\"\n    }),\n    type: \"text\",\n    name: \"name\",\n    placeholder: \"Enter your name here\",\n    onChange: function onChange(event) {\n      return console.info('On input change');\n    },\n    priority: \"primary\",\n    rightIcon: mdx(block.S, null, mdx(ButtonIcon, {\n      icon: mdx(IconInfo, {\n        mdxType: \"IconInfo\"\n      }),\n      onClick: function onClick() {\n        return console.info('ButtonIcon clicked');\n      },\n      priority: \"primary\",\n      mdxType: \"ButtonIcon\"\n    })),\n    mdxType: \"Input\"\n  })))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Playground direction=\\\"vertical\\\">\\n  <Form autoComplete=\\\"false\\\">\\n    <block.L>\\n      <Input\\n        leftIcon={<IconInfo />}\\n        type=\\\"text\\\"\\n        name=\\\"name\\\"\\n        value=\\\"Primary\\\"\\n        placeholder=\\\"Enter your name here\\\"\\n        priority=\\\"primary\\\"\\n        onChange={(event) => console.info('On input change')}\\n      />\\n    </block.L>\\n    <block.L>\\n      <Input\\n        leftIcon={<IconInfo />}\\n        type=\\\"text\\\"\\n        name=\\\"name\\\"\\n        placeholder=\\\"Enter your name here\\\"\\n        onChange={(event) => console.info('On input change')}\\n        priority=\\\"primary\\\"\\n        rightIcon={\\n          <block.S>\\n            <ButtonIcon\\n              icon={<IconInfo />}\\n              onClick={() => console.info('ButtonIcon clicked')}\\n              priority=\\\"primary\\\"\\n            />\\n          </block.S>\\n        }\\n      />\\n    </block.L>\\n  </Form>\\n</Playground>\\n\")), mdx(\"h3\", null, \"Map of Input\"), mdx(\"a\", {\n    href: \"/package/woly/component/input-map\"\n  }, \"See full map of Input\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<a href=\\\"/package/woly/component/input-map\\\">See full map of Input</a>\\n\")), mdx(\"h3\", null, \"Props\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Name\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Default\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"autocomplete\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"\\\"on\\\" \\u04CF \\\"off\\\"\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"\\\"off\\\"\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Autocomplete attribute\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"disabled\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"false\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"HTML disabled attribute\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"leftIcon\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"React.ReactNode\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"null\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Component to show on the left side of the text (ex.: Icon)\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"name\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Name attribute specifies a name of the input\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"onChange\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"React.EventHandler<React.SyntheticEvent>;\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"On change event handler.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"placeholder\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"''\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"CSS pseudo-element represents the placeholder text\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"priority\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"'secondary'\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Priority prop to style Input component\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"rightIcon\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"React.ReactNode\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"null\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Component to show on the right side of the text (ex.: Icon)\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"type\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"\\\"text\\\" \\u04CF \\\"password\\\" \\u04CF \\\"email\\\"\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"text\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"HTML type of the input\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"value\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"HTMLInputElement['value']\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"null\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Value of input field\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"...\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"HTMLInputElement\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"{}\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Other props are inherited from \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"HTMLInputElement\"))))));\n}\n;\nMDXContent.isMDXComponent = true;"}]}},"staticQueryHashes":["1297603051"]}