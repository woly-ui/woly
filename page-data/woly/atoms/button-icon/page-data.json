{"componentChunkName":"component---node-modules-gatsby-theme-woly-src-templates-usage-js","path":"/woly/atoms/button-icon","result":{"pageContext":{"package":"woly","category":"atoms","name":"button-icon","pages":[{"type":"state","meta":{"name":"button-icon","category":"atoms","package":"woly"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(GenerateButtonIconMap, {\n    mdxType: \"GenerateButtonIconMap\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<GenerateButtonIconMap />\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"},{"type":"specification","meta":{"name":"button-icon","category":"atoms","package":"woly"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Overview\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ButtonIcon\"), \" is an interactive element that contains an icon and no (visible) accompanying text. An icon expresses what action will occur when the user interacts with it.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Recommended to use\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"to trigger an action that takes effect immediately without additional input. These buttons are either grouped and placed in a distinguishable interface frame or container and their actions affect globally (e.g. toolbars, toolbox), or placed right next to an object on which the action is performed (e.g. list item, which we can remove, edit, make favorite, etc.).\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"to switch between two actions. One of the actions is always active, another is inactive ( e.g., \\\"favorite\\\", \\\"hamburger\\\"). Icons of such buttons have a different appearance for their states (e.g., different shape, fill color, transition animation)\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Not recommended using\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"to trigger actions that could influence the user\\u2019s flow, like submitting a form, because \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"ButtonIcon\"), \" can't have a primary action in the current user scenario (use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Button\"), \" instead);\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"to navigate a user to another page or an external web resource (use a link instead);\")), mdx(\"h2\", null, \"Appearance\"), mdx(\"h3\", null, \"Icon\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ButtonIcon\"), \" has no label, that would clarify its meaning in that particular context, and all responsibility for this task is placed on the icon. Some icons are fairly fast to recognize at a glance, icons for home, print, and the magnifying glass for search are such instances. Outside of these examples, most icons continue to be ambiguous to users due to their association with different meanings across various interfaces. That's why it's important to make icon easily recognizable and have a meaning that corresponds to the action performed by the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ButtonIcon\"), \". To help overcome the ambiguity that almost all icons face, you may pair \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ButtonIcon\"), \" with a component \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Tooltip\"), \" containing a hint about the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ButtonIcon\"), \" underlying action.\"), mdx(\"h3\", null, \"Weight and priority\"), mdx(\"p\", null, \"Styles are primarily used to differentiate more important actions from less important ones. Create a hierarchy of actions that will guide the user where there are multitudes of choices. You can do it by changing the button's priority and weight. Usually, you can have a single prominent button (that style is often called \\\"primary\\\"), and several medium \\\"secondary\\\" and low emphasis \\\"tertiary\\\" actions ('default' priority).\"), mdx(\"h2\", null, \"Placement\"), mdx(\"p\", null, \"Put buttons where users expect to find them. Buttons should be located in places where users can easily find them or expect to see them. Don\\u2019t make users hunt for buttons. If users can\\u2019t find a button, they won\\u2019t know that it exists.\"), mdx(\"h3\", null, \"Grouping\"), mdx(\"p\", null, \"If \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ButtonIcon\"), \"s share related actions, they\\u2019re good to be in a group and should be placed either globally (toolbar, toolbox, etc) or next to an object on which the action is performed. In most cases, all buttons within a group should have the same priority, weight, and size. But it does not limit you to make one particular button with the main action as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"primary\"), \" and others as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"secondary\"), \".\"), mdx(\"h3\", null, \"Inside other components\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ButtonIcon\"), \" can be used as a part of a more complex component, like a hide/show toggle in the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InputPassword\"), \" or remove button in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Chip\"), \". It's recommended to place \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ButtonIcon\"), \" on the right side after component's content and match its \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"priority\"), \" with its parent for consistency.\"), mdx(\"h2\", null, \"Behaviors\"), mdx(\"h3\", null, \"States\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ButtonIcon\"), \" has a common set of states for an interactive element:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"normal\"), \" \\u2014 communicates that component is interactive and enabled.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"focus\"), \" \\u2014 communicates that the user has highlighted an element, using a keyboard or other input method.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"hover\"), \" \\u2014 communicates when a user has placed a cursor above an interactive element.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"active\"), \" \\u2014 or pressed state communicates that the user had tapped on the button.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"disabled\"), \" \\u2014 communicates that component is currently noninteractive but can be enabled in the future.\")), mdx(\"h3\", null, \"Interactions\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Mouse\")), mdx(\"p\", null, \"Users can trigger a button by clicking anywhere within the button container.\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Keyboard\")), mdx(\"p\", null, \"Users can trigger a button by pressing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Enter\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Space\"), \", while it has focus and is not disabled. If the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ButtonIcon\"), \" is located in the toolbar, you should provide a keyboard shortcut for easier access.\"), mdx(\"h2\", null, \"Accessibility\"), mdx(\"p\", null, \"It\\u2019s recommended to provide \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ButtonIcon\"), \" with an aria-label to describe the action to people using assistive technologies, such as screen readers.\"));\n}\n;\nMDXContent.isMDXComponent = true;"},{"type":"usage","meta":{"name":"button-icon","category":"atoms","package":"woly"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ButtonIcon\"), \" is an icon that triggers some sort of action on the page.\\nMore accurately, technically speaking, an icon button is a button that contains an icon and no (visible) accompanying text.\\nConsidering that a text label is not used, an icon should be present to signify what the button does.\"), mdx(\"p\", null, \"Also, icons can be used as toggle buttons when they allow selection, or deselection, of a single choice, such as marking an item as a favorite.\"), mdx(\"h3\", null, \"Example\"), mdx(Playground, {\n    mdxType: \"Playground\"\n  }, mdx(ButtonIcon, {\n    icon: mdx(IconSearch, {\n      mdxType: \"IconSearch\"\n    }),\n    onClick: function onClick() {\n      return console.info('ButtonIcon clicked');\n    },\n    priority: \"default\",\n    weight: \"fill\",\n    mdxType: \"ButtonIcon\"\n  }), mdx(ButtonIcon, {\n    icon: mdx(IconSearch, {\n      mdxType: \"IconSearch\"\n    }),\n    onClick: function onClick() {\n      return console.info('ButtonIcon clicked');\n    },\n    priority: \"default\",\n    weight: \"outline\",\n    mdxType: \"ButtonIcon\"\n  }), mdx(ButtonIcon, {\n    icon: mdx(IconSearch, {\n      mdxType: \"IconSearch\"\n    }),\n    onClick: function onClick() {\n      return console.info('ButtonIcon clicked');\n    },\n    priority: \"default\",\n    weight: \"transparent\",\n    mdxType: \"ButtonIcon\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Playground>\\n  <ButtonIcon\\n    icon={<IconSearch />}\\n    onClick={() => console.info('ButtonIcon clicked')}\\n    priority=\\\"default\\\"\\n    weight=\\\"fill\\\"\\n  />\\n  <ButtonIcon\\n    icon={<IconSearch />}\\n    onClick={() => console.info('ButtonIcon clicked')}\\n    priority=\\\"default\\\"\\n    weight=\\\"outline\\\"\\n  />\\n  <ButtonIcon\\n    icon={<IconSearch />}\\n    onClick={() => console.info('ButtonIcon clicked')}\\n    priority=\\\"default\\\"\\n    weight=\\\"transparent\\\"\\n  />\\n</Playground>\\n\")), mdx(\"h2\", null, \"Sizes\"), mdx(\"p\", null, \"Button-icon's size can controlled by block-container and it`s width is equal to container size.\"), mdx(Playground, {\n    mdxType: \"Playground\"\n  }, mdx(block.N, null, mdx(ButtonIcon, {\n    icon: mdx(IconSearch, {\n      mdxType: \"IconSearch\"\n    }),\n    onClick: function onClick() {\n      return console.info('ButtonIcon clicked');\n    },\n    priority: \"default\",\n    weight: \"fill\",\n    mdxType: \"ButtonIcon\"\n  })), mdx(block.XS, null, mdx(ButtonIcon, {\n    icon: mdx(IconEyeOpened, {\n      mdxType: \"IconEyeOpened\"\n    }),\n    onClick: function onClick() {\n      return console.info('ButtonIcon clicked');\n    },\n    priority: \"primary\",\n    weight: \"fill\",\n    mdxType: \"ButtonIcon\"\n  })), mdx(block.S, null, mdx(ButtonIcon, {\n    icon: mdx(IconSearch, {\n      mdxType: \"IconSearch\"\n    }),\n    onClick: function onClick() {\n      return console.info('ButtonIcon clicked');\n    },\n    priority: \"secondary\",\n    weight: \"fill\",\n    mdxType: \"ButtonIcon\"\n  })), mdx(block.M, null, mdx(ButtonIcon, {\n    icon: mdx(IconEyeOpened, {\n      mdxType: \"IconEyeOpened\"\n    }),\n    onClick: function onClick() {\n      return console.info('ButtonIcon clicked');\n    },\n    priority: \"primary\",\n    disabled: true,\n    weight: \"fill\",\n    mdxType: \"ButtonIcon\"\n  }))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Playground>\\n  <block.N>\\n    <ButtonIcon\\n      icon={<IconSearch />}\\n      onClick={() => console.info('ButtonIcon clicked')}\\n      priority=\\\"default\\\"\\n      weight=\\\"fill\\\"\\n    />\\n  </block.N>\\n  <block.XS>\\n    <ButtonIcon\\n      icon={<IconEyeOpened />}\\n      onClick={() => console.info('ButtonIcon clicked')}\\n      priority=\\\"primary\\\"\\n      weight=\\\"fill\\\"\\n    />\\n  </block.XS>\\n  <block.S>\\n    <ButtonIcon\\n      icon={<IconSearch />}\\n      onClick={() => console.info('ButtonIcon clicked')}\\n      priority=\\\"secondary\\\"\\n      weight=\\\"fill\\\"\\n    />\\n  </block.S>\\n  <block.M>\\n    <ButtonIcon\\n      icon={<IconEyeOpened />}\\n      onClick={() => console.info('ButtonIcon clicked')}\\n      priority=\\\"primary\\\"\\n      disabled\\n      weight=\\\"fill\\\"\\n    />\\n  </block.M>\\n</Playground>\\n\")), mdx(\"h3\", null, \"Weight and priority\"), mdx(\"p\", null, \"Button-icon can be represented in primary, secondary or default priorities and can be styled by changing icon`s weight: fill, outline, transparent.\\nIn case of choosing button-icon in black-and-white priority with outline styles use the opposite background color to the text color of button-icon.\"), mdx(Playground, {\n    mdxType: \"Playground\"\n  }, mdx(block.L, {\n    style: {\n      display: 'flex',\n      justifyContent: 'space-between',\n      padding: '24px',\n      width: '900px'\n    }\n  }, mdx(ButtonIcon, {\n    icon: mdx(IconSearch, {\n      mdxType: \"IconSearch\"\n    }),\n    onClick: function onClick() {\n      return console.info('ButtonIcon clicked');\n    },\n    priority: \"primary\",\n    weight: \"fill\",\n    mdxType: \"ButtonIcon\"\n  }), mdx(ButtonIcon, {\n    icon: mdx(IconSearch, {\n      mdxType: \"IconSearch\"\n    }),\n    onClick: function onClick() {\n      return console.info('ButtonIcon clicked');\n    },\n    priority: \"primary\",\n    weight: \"outline\",\n    mdxType: \"ButtonIcon\"\n  }), mdx(ButtonIcon, {\n    icon: mdx(IconSearch, {\n      mdxType: \"IconSearch\"\n    }),\n    onClick: function onClick() {\n      return console.info('ButtonIcon clicked');\n    },\n    priority: \"primary\",\n    weight: \"transparent\",\n    mdxType: \"ButtonIcon\"\n  }), mdx(ButtonIcon, {\n    icon: mdx(IconSearch, {\n      mdxType: \"IconSearch\"\n    }),\n    onClick: function onClick() {\n      return console.info('ButtonIcon clicked');\n    },\n    priority: \"secondary\",\n    weight: \"fill\",\n    mdxType: \"ButtonIcon\"\n  }), mdx(ButtonIcon, {\n    icon: mdx(IconSearch, {\n      mdxType: \"IconSearch\"\n    }),\n    onClick: function onClick() {\n      return console.info('ButtonIcon clicked');\n    },\n    priority: \"secondary\",\n    weight: \"outline\",\n    mdxType: \"ButtonIcon\"\n  }), mdx(ButtonIcon, {\n    icon: mdx(IconSearch, {\n      mdxType: \"IconSearch\"\n    }),\n    onClick: function onClick() {\n      return console.info('ButtonIcon clicked');\n    },\n    priority: \"secondary\",\n    weight: \"transparent\",\n    mdxType: \"ButtonIcon\"\n  }), mdx(ButtonIcon, {\n    icon: mdx(IconSearch, {\n      mdxType: \"IconSearch\"\n    }),\n    onClick: function onClick() {\n      return console.info('ButtonIcon clicked');\n    },\n    priority: \"default\",\n    weight: \"fill\",\n    mdxType: \"ButtonIcon\"\n  }), mdx(ButtonIcon, {\n    icon: mdx(IconSearch, {\n      mdxType: \"IconSearch\"\n    }),\n    onClick: function onClick() {\n      return console.info('ButtonIcon clicked');\n    },\n    priority: \"default\",\n    weight: \"outline\",\n    mdxType: \"ButtonIcon\"\n  }), mdx(ButtonIcon, {\n    icon: mdx(IconSearch, {\n      mdxType: \"IconSearch\"\n    }),\n    onClick: function onClick() {\n      return console.info('ButtonIcon clicked');\n    },\n    priority: \"default\",\n    weight: \"transparent\",\n    mdxType: \"ButtonIcon\"\n  }), mdx(ButtonIcon, {\n    icon: mdx(IconSearch, {\n      mdxType: \"IconSearch\"\n    }),\n    onClick: function onClick() {\n      return console.info('ButtonIcon clicked');\n    },\n    weight: \"goast\",\n    priority: \"white\",\n    mdxType: \"ButtonIcon\"\n  }))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Playground>\\n  <block.L\\n    style={{\\n      display: 'flex',\\n      justifyContent: 'space-between',\\n      padding: '24px',\\n      width: '900px',\\n    }}\\n  >\\n    <ButtonIcon\\n      icon={<IconSearch />}\\n      onClick={() => console.info('ButtonIcon clicked')}\\n      priority=\\\"primary\\\"\\n      weight=\\\"fill\\\"\\n    />\\n    <ButtonIcon\\n      icon={<IconSearch />}\\n      onClick={() => console.info('ButtonIcon clicked')}\\n      priority=\\\"primary\\\"\\n      weight=\\\"outline\\\"\\n    />\\n    <ButtonIcon\\n      icon={<IconSearch />}\\n      onClick={() => console.info('ButtonIcon clicked')}\\n      priority=\\\"primary\\\"\\n      weight=\\\"transparent\\\"\\n    />\\n    <ButtonIcon\\n      icon={<IconSearch />}\\n      onClick={() => console.info('ButtonIcon clicked')}\\n      priority=\\\"secondary\\\"\\n      weight=\\\"fill\\\"\\n    />\\n    <ButtonIcon\\n      icon={<IconSearch />}\\n      onClick={() => console.info('ButtonIcon clicked')}\\n      priority=\\\"secondary\\\"\\n      weight=\\\"outline\\\"\\n    />\\n    <ButtonIcon\\n      icon={<IconSearch />}\\n      onClick={() => console.info('ButtonIcon clicked')}\\n      priority=\\\"secondary\\\"\\n      weight=\\\"transparent\\\"\\n    />\\n    <ButtonIcon\\n      icon={<IconSearch />}\\n      onClick={() => console.info('ButtonIcon clicked')}\\n      priority=\\\"default\\\"\\n      weight=\\\"fill\\\"\\n    />\\n    <ButtonIcon\\n      icon={<IconSearch />}\\n      onClick={() => console.info('ButtonIcon clicked')}\\n      priority=\\\"default\\\"\\n      weight=\\\"outline\\\"\\n    />\\n    <ButtonIcon\\n      icon={<IconSearch />}\\n      onClick={() => console.info('ButtonIcon clicked')}\\n      priority=\\\"default\\\"\\n      weight=\\\"transparent\\\"\\n    />\\n    <ButtonIcon\\n      icon={<IconSearch />}\\n      onClick={() => console.info('ButtonIcon clicked')}\\n      weight=\\\"goast\\\"\\n      priority=\\\"white\\\"\\n    />\\n  </block.L>\\n</Playground>\\n\")), mdx(\"h3\", null, \"Props\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Name\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Default\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"icon\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"React.ReactNode\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"null\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Set the icon component inside the button\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"onClick\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"React.MouseEventHandler<HTMLButtonElement>\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Callback when button clicked\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"priority\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"'secondary'\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Priority prop to style ButtonIcon component\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"weight\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"fill\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Set button-icon`s weight (ex.: fill, outline, transparent)\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"...\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"HTMLButtonElement\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"{}\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Other props are inherited from \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"HTMLButtonElement\"))))));\n}\n;\nMDXContent.isMDXComponent = true;"}]}},"staticQueryHashes":["1297603051"]}