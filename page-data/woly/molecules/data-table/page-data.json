{"componentChunkName":"component---node-modules-gatsby-theme-woly-src-templates-usage-js","path":"/woly/molecules/data-table","result":{"pageContext":{"package":"woly","category":"molecules","name":"data-table","pages":[{"type":"usage","meta":{"name":"data-table","category":"molecules","package":"woly"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"Example\"), mdx(Example_be025ef9410a5eef6f380bd7997b214d8644d3c8, {\n    mdxType: \"Example_be025ef9410a5eef6f380bd7997b214d8644d3c8\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\",\n    \"metastring\": \"playground\",\n    \"playground\": true\n  }, \"import { DataTable, DataTableHeadProps } from 'woly'\\nimport { createStore, createEvent, forward, combine } from 'effector'\\nimport { useStore } from 'effector-react'\\nimport { Filter } from './filter'\\nimport { RangeCell } from './range-cell'\\n\\nconst bankNames = [\\n  {\\n    value: '\\u0412\\u0422\\u0411',\\n    name: '\\u0412\\u0422\\u0411',\\n  },\\n  {\\n    value: '\\u0422\\u0438\\u043D\\u044C\\u043A\\u043E\\u0444\\u0444',\\n    name: '\\u0422\\u0438\\u043D\\u044C\\u043A\\u043E\\u0444\\u0444',\\n  },\\n  {\\n    value: '\\u0410\\u043B\\u044C\\u0444\\u0430-\\u0431\\u0430\\u043D\\u043A',\\n    name: '\\u0410\\u043B\\u044C\\u0444\\u0430',\\n  },\\n  {\\n    value: '\\u041E\\u0442\\u043A\\u0440\\u044B\\u0442\\u0438\\u0435',\\n    name: '\\u041E\\u0442\\u043A\\u0440\\u044B\\u0442\\u0438\\u0435',\\n  },\\n];\\n\\nconst paymentSystems = [\\n  {\\n    value: 'Visa/Mastercard',\\n    name: 'Visa/Mastercard',\\n  },\\n  {\\n    value: '\\u041C\\u0418\\u0420',\\n    name: '\\u041C\\u0418\\u0420',\\n  },\\n];\\n\\nconst $bankFilter = createStore([])\\nconst bankFilterUpdated = createEvent()\\nforward({ from: bankFilterUpdated, to: $bankFilter })\\n\\nconst $paymentSystemFilter = createStore([])\\nconst paymentSystemFilterUpdated = createEvent()\\nforward({ from: paymentSystemFilterUpdated, to: $paymentSystemFilter })\\n\\nconst columns = [\\n  {\\n    title: 'ID \\u0414\\u0435\\u0431\\u0435\\u0442',\\n    property: 'id-debet',\\n  },\\n  {\\n    title: 'ID \\u041A\\u0440\\u0435\\u0434\\u0438\\u0442',\\n    property: 'id-credit',\\n  },\\n  {\\n    title: '\\u041D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435 \\u0431\\u0430\\u043D\\u043A\\u0430',\\n    property: 'bank-name',\\n    head: ({ title }: DataTableHeadProps) => (\\n      <Filter value={useStore($bankFilter)} onChange={bankFilterUpdated} options={bankNames} title={title} />\\n    ),\\n  },\\n  {\\n    title: '\\u041F\\u043B\\u0430\\u0442\\u0435\\u0436\\u043D\\u0430\\u044F \\u0441\\u0438\\u0441\\u0442\\u0435\\u043C\\u0430',\\n    property: 'payment-system',\\n    head: ({ title }: DataTableHeadProps) => (\\n      <Filter value={useStore($paymentSystemFilter)} onChange={paymentSystemFilterUpdated} options={paymentSystems} title={title} />\\n    ),\\n  },\\n  {\\n    title: '\\u0414\\u0438\\u0430\\u043F\\u0430\\u0437\\u043E\\u043D',\\n    property: 'range',\\n    cell: RangeCell,\\n  },\\n];\\n\\nconst values = [\\n  {\\n    id: 1,\\n    'id-debet': 798172,\\n    'id-credit': null,\\n    'bank-name': '\\u0412\\u0422\\u0411',\\n    'payment-system': 'Visa/Mastercard',\\n    range: {\\n      from: 1,\\n      to: 4,\\n    },\\n  },\\n  {\\n    id: 2,\\n    'id-debet': 798173,\\n    'id-credit': null,\\n    'bank-name': '\\u0410\\u043B\\u044C\\u0444\\u0430-\\u0431\\u0430\\u043D\\u043A',\\n    'payment-system': 'Visa/Mastercard',\\n    range: {\\n      from: 4,\\n      to: 6,\\n    },\\n  },\\n  {\\n    id: 3,\\n    'id-debet': 798174,\\n    'id-credit': null,\\n    'bank-name': '\\u0412\\u0422\\u0411',\\n    'payment-system': '\\u041C\\u0418\\u0420',\\n    range: {\\n      from: 4,\\n      to: 6,\\n    },\\n  },\\n  {\\n    id: 4,\\n    'id-debet': 798175,\\n    'id-credit': null,\\n    'bank-name': '\\u0422\\u0438\\u043D\\u044C\\u043A\\u043E\\u0444\\u0444',\\n    'payment-system': 'Visa/Mastercard',\\n    range: {\\n      from: 3,\\n      to: 6,\\n    },\\n  },\\n  {\\n    id: 5,\\n    'id-debet': 798176,\\n    'id-credit': null,\\n    'bank-name': '\\u041E\\u0442\\u043A\\u0440\\u044B\\u0442\\u0438\\u0435',\\n    'payment-system': '\\u041C\\u0418\\u0420',\\n    range: {\\n      from: 4,\\n      to: 6,\\n    },\\n  },\\n  {\\n    id: 6,\\n    'id-debet': 798177,\\n    'id-credit': null,\\n    'bank-name': '\\u0410\\u043B\\u044C\\u0444\\u0430-\\u0431\\u0430\\u043D\\u043A',\\n    'payment-system': '\\u041C\\u0418\\u0420',\\n    range: {\\n      from: 4,\\n      to: 9,\\n    },\\n  },\\n];\\n\\nconst $filteredValues = combine(\\n  $bankFilter,\\n  $paymentSystemFilter,\\n  (banks, paymentSystems) => {\\n    return values.filter(value => {\\n      const bankMatches = banks.length === 0 || banks.includes(value['bank-name'])\\n      const paymentSystemMatches = paymentSystems.length === 0 || paymentSystems.includes(value['payment-system'])\\n      console.log(banks, value['bank-name'])\\n      return bankMatches && paymentSystemMatches\\n    })\\n  }\\n)\\n\\nexport function Example() {\\n  const values = useStore($filteredValues)\\n\\n  return <Playground>\\n    <block.L style={{ minHeight: 300, background: '#f5f5f5', padding: '20px' }}>\\n      <DataTable rowKey=\\\"id\\\" columns={columns} values={values} priority=\\\"primary\\\" />\\n    </block.L>\\n  </Playground>\\n}\\n\")), mdx(\"h3\", null, \"Components\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Name\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"DataTable\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"DataTable component\")))), mdx(\"h3\", null, \"DataTable Props\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Name\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Default\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"columns\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"Array<ColumnProps>\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Table head\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"placeholder\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"React.ReactNode \\u04CF string\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"'----'\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"String that is displayed when value is empty\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"values\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"Array<Record<string, CellProps>>\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Table content\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"priority\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"'secondary'\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Priority prop to style DataTable component\")))), mdx(\"h3\", null, \"HeadProps\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Name\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Default\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"title\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"React.ReactNode \\u04CF string\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"A column name passed via \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"title\"), \" of \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"ColumnProps\"))))), mdx(\"h3\", null, \"ColumnProps\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Name\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Default\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"title\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"React.ReactNode \\u04CF string\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"A column name. Can be a simple string or a react node\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"property\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Unique property of column to connect head with value in a row\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"head\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"React.FC<HeadProps>\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"FC to render head\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"cell\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"React.FC<CellProps>\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"FC to render cell\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"placeholder\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"React.ReactNode \\u04CF string\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"A column-specific placeholder\")))));\n}\n;\nMDXContent.isMDXComponent = true;"}]}},"staticQueryHashes":["1297603051"]}