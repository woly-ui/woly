{"componentChunkName":"component---node-modules-gatsby-theme-woly-src-templates-usage-js","path":"/woly/molecules/checkbox","result":{"pageContext":{"package":"woly","category":"molecules","name":"checkbox","pages":[{"type":"usage","meta":{"name":"checkbox","category":"molecules","package":"woly"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Checkboxes allow you to setup selectable options for your users - either to toggle a single setting on or off, or to allow for multiple choices.\"), mdx(\"p\", null, \"Use descriptive static text relevant to each checkbox element.\"), mdx(\"p\", null, \"In case of using set of checkboxes as a logical group use component 'Label' for labeling the checkbox group.\"), mdx(\"p\", null, \"Checkboxes are tiny in nature, and, thus, they can be hard to click or tap.\"), mdx(\"p\", null, \"To enlarge the target area, let users select an option by clicking or tapping not just that small square, but also the label or associated words.\"), mdx(\"p\", null, \"Use a checkbox when the user has to stop before performing an action. Checkbox will introduce a little bit of friction and make them stop and think about the action.\"), mdx(\"h3\", null, \"Example\"), mdx(Example_c1beb20d9a4cdc999b1ddfc08f52ac285cba182c, {\n    mdxType: \"Example_c1beb20d9a4cdc999b1ddfc08f52ac285cba182c\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\",\n    \"metastring\": \"playground\",\n    \"playground\": true\n  }, \"import {Checkbox} from 'ui';\\n\\nexport function Example () {\\n  const [values, setValues] = React.useState({})\\n\\n  const handleChange = (e) => {\\n    const { id } = e.target;\\n\\n    setValues({\\n      ...values,\\n      [id]: !values[id]\\n    })\\n  }\\n\\n  return <Playground direction=\\\"vertical\\\">\\n    <div style={{ width: '240px' }}>\\n      <Checkbox checked={values['ex1-simple1'] ?? false} id=\\\"ex1-simple1\\\" onChange={handleChange} text=\\\"Option 1\\\" priority=\\\"primary\\\" />\\n      <Checkbox checked={values['ex1-simple2'] ?? false} id=\\\"ex1-simple2\\\" onChange={handleChange} text=\\\"Option 2\\\" priority=\\\"primary\\\" />\\n      <Checkbox checked={values['ex1-simple3'] ?? false} id=\\\"ex1-simple3\\\" onChange={handleChange} text=\\\"Option 3 with long text that will go to next line for sure\\\" priority=\\\"primary\\\" />\\n    </div>\\n  </Playground>\\n}\\n\")), mdx(\"h3\", null, \"Size\"), mdx(\"p\", null, \"Size controlled by the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"component-level\"), \" block property not from the props.\"), mdx(Example_56153a977312742b630b56774cb86c06071bf15e, {\n    mdxType: \"Example_56153a977312742b630b56774cb86c06071bf15e\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\",\n    \"metastring\": \"playground\",\n    \"playground\": true\n  }, \"import {Checkbox} from 'ui';\\n\\nconst filler = 'lorem ipsum dolor sit amet'\\n\\nexport function Example () {\\n  const [values, setValues] = React.useState({})\\n\\n  const handleChange = (e) => {\\n    const { checked, id } = e.currentTarget;\\n\\n    setValues({\\n      ...values,\\n      [id]: !values[id]\\n    })\\n  }\\n\\n  return <Playground direction=\\\"vertical\\\">\\n    <block.S>\\n      <Checkbox checked={values['ex2-small'] ?? false} id=\\\"ex2-small\\\" onChange={handleChange} text={`Small ${filler}`} priority=\\\"primary\\\" />\\n    </block.S>\\n    <block.M>\\n      <Checkbox\\n        checked={values['e2-medium'] ?? false}\\n        id=\\\"e2-medium\\\"\\n        onChange={handleChange}\\n        text={`Medium ${filler}`}\\n        priority=\\\"primary\\\"\\n      />\\n    </block.M>\\n    <block.L>\\n      <Checkbox checked={values['ex2-large'] ?? false} id=\\\"ex2-large\\\" onChange={handleChange} text={`Large ${filler}`} priority=\\\"primary\\\" />\\n    </block.L>\\n    <block.XL>\\n      <Checkbox\\n        checked={values['e2-extra'] ?? false}\\n        id=\\\"e2-extra\\\"\\n        onChange={handleChange}\\n        text={`Extra Large ${filler}`}\\n        priority=\\\"primary\\\"\\n      />\\n    </block.XL>\\n    <block.H>\\n      <Checkbox checked={values['ex2-huge'] ?? false} id=\\\"ex2-huge\\\" onChange={handleChange} text={`Huge ${filler}`} priority=\\\"primary\\\" />\\n    </block.H>\\n  </Playground>\\n}\\n\")), mdx(\"h3\", null, \"Priorities\"), mdx(\"p\", null, \"Primary priority should be used to focus user attention. The disabled checkbox is unusable and un-clickable.\"), mdx(Example_04d144f8b7ca922acc618cd77d9236a570ace7f1, {\n    mdxType: \"Example_04d144f8b7ca922acc618cd77d9236a570ace7f1\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\",\n    \"metastring\": \"playground\",\n    \"playground\": true\n  }, \"import {Checkbox} from 'ui';\\n\\nexport function Example () {\\n  const [values, setValues] = React.useState({})\\n\\n  const handleChange = (e) => {\\n    const { checked, id } = e.currentTarget;\\n\\n    setValues({\\n      ...values,\\n      [id]: !values[id]\\n    })\\n  }\\n\\n  return <Playground>\\n    <Checkbox checked onChange={handleChange} id=\\\"primary\\\" text=\\\"Primary\\\" priority=\\\"primary\\\" />\\n    <Checkbox\\n      checked\\n      onChange={handleChange}\\n      disabled\\n      id=\\\"disabled\\\"\\n      text=\\\"Disabled\\\"\\n      priority=\\\"primary\\\"\\n    />\\n  </Playground>\\n}\\n\")), mdx(\"h3\", null, \"Props\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Name\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Default\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"checked\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Whether checkbox is checked or not\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"disabled\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"HTML disabled attribute\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"id\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"HTML id attribute\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"onChange\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"React.ChangeEventHandler<HTMLInputElement>\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Callback when checkbox is clicked\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"onKeyDown\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"The onKeydown event occurs when the user is pressing a key (on the keyboard)\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"priority\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"'secondary'\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Priority prop to style Checkbox component\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"text\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Text component\")))));\n}\n;\nMDXContent.isMDXComponent = true;"}]}},"staticQueryHashes":["1297603051"]}