{"componentChunkName":"component---node-modules-gatsby-theme-woly-src-templates-usage-js","path":"/woly/molecules/radio-button","result":{"pageContext":{"package":"woly","category":"molecules","name":"radio-button","pages":[{"type":"usage","meta":{"name":"radio-button","category":"molecules","package":"woly"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"RadioButton\"), \" component lets you add a radio button and assign it to a radio group.\\nUsers can select only one radio button at a time within a radio group.\"), mdx(\"h3\", null, \"Radio button group.\"), mdx(\"p\", null, \"Radio buttons are used for mutually exclusive choices, not for multiple choices.\\nOnly one radio button can be selected at a time.\\nWhen a user chooses a new item, the previous choice is automatically deselected.\"), mdx(\"h3\", null, \"Example\"), mdx(Example_9cf76fa4204f522af8325260fe109dc86d8988ad, {\n    mdxType: \"Example_9cf76fa4204f522af8325260fe109dc86d8988ad\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\",\n    \"metastring\": \"playground\",\n    \"playground\": true\n  }, \"import {RadioButton, Heading} from 'ui';\\n\\nexport function Example () {\\n  const [checked, setChecked] = React.useState('no');\\n\\n  const handleChange = (e) => {\\n    setChecked(e.target.value)\\n  }\\n\\n  return <Playground direction=\\\"vertical\\\">\\n    <Heading size=\\\"3\\\">Are you a programmer?</Heading>\\n    <div>\\n      <RadioButton\\n        name=\\\"example-1\\\"\\n        id=\\\"e1-yes\\\"\\n        checked={checked === 'yes'}\\n        onChange={handleChange}\\n        priority=\\\"primary\\\"\\n        text=\\\"yes\\\"\\n        value=\\\"yes\\\"\\n      />\\n      <RadioButton\\n        name=\\\"example-1\\\"\\n        id=\\\"e1-no\\\"\\n        checked={checked === 'no'}\\n        onChange={handleChange}\\n        priority=\\\"primary\\\"\\n        text=\\\"no\\\"\\n        value=\\\"no\\\"\\n      />\\n    </div>\\n  </Playground>;\\n}\\n\")), mdx(\"h3\", null, \"Disabled\"), mdx(\"p\", null, \"Disabled radio button are uneditable. They have less opacity so that they appear less tappable.\"), mdx(Example_d8ab42bc6b5ab403e2181fa86f31baa0cde95b0f, {\n    mdxType: \"Example_d8ab42bc6b5ab403e2181fa86f31baa0cde95b0f\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\",\n    \"metastring\": \"playground\",\n    \"playground\": true\n  }, \"import {RadioButton} from 'ui';\\n\\nexport function Example () {\\n  return <Playground>\\n    <RadioButton checked disabled priority=\\\"primary\\\" text=\\\"disabled\\\" onChange={console.log} />\\n  </Playground>;\\n}\\n\")), mdx(\"h3\", null, \"Priorities\"), mdx(\"p\", null, \"Primary and danger priorities are should be used to focus user attention.\"), mdx(Example_d7bf0d8e9f920ae8cf458f34e40be6265060ba45, {\n    mdxType: \"Example_d7bf0d8e9f920ae8cf458f34e40be6265060ba45\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\",\n    \"metastring\": \"playground\",\n    \"playground\": true\n  }, \"import {RadioButton, Heading} from 'ui';\\n\\nexport function Example () {\\n  const [checked, setChecked] = React.useState('no');\\n\\n  const handleChange = (e) => {\\n    setChecked(e.target.value)\\n  }\\n\\n  return <Playground direction=\\\"vertical\\\">\\n    <Heading size=\\\"3\\\">Do you smoke?</Heading>\\n    <div>\\n      <RadioButton\\n        name=\\\"example-2\\\"\\n        id=\\\"e2-yes\\\"\\n        checked={checked === 'yes'}\\n        onChange={handleChange}\\n        priority=\\\"danger\\\"\\n        text=\\\"yes\\\"\\n        value=\\\"yes\\\"\\n      />\\n      <RadioButton\\n        name=\\\"example-2\\\"\\n        id=\\\"e2-no\\\"\\n        checked={checked === 'no'}\\n        onChange={handleChange}\\n        priority=\\\"primary\\\"\\n        text=\\\"no\\\"\\n        value=\\\"no\\\"\\n      />\\n    </div>\\n  </Playground>;\\n}\\n\")), mdx(\"p\", null, \"Secondary priority should be used as default priority\"), mdx(Example_c884ba2e22b6072e4e32ccf3c448c388f92b9301, {\n    mdxType: \"Example_c884ba2e22b6072e4e32ccf3c448c388f92b9301\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\",\n    \"metastring\": \"playground\",\n    \"playground\": true\n  }, \"import {RadioButton, Heading} from 'ui';\\n\\nexport function Example () {\\n  const [checked, setChecked] = React.useState('m');\\n\\n  const handleChange = (e) => {\\n    setChecked(e.target.value)\\n  }\\n\\n  return <Playground direction=\\\"vertical\\\">\\n    <Heading size=\\\"3\\\">Sex</Heading>\\n    <div>\\n      <RadioButton\\n        name=\\\"example-3\\\"\\n        id=\\\"e3-male\\\"\\n        checked={checked === 'm'}\\n        onChange={handleChange}\\n        text=\\\"male\\\"\\n        value=\\\"m\\\"\\n      />\\n      <RadioButton\\n        name=\\\"example-3\\\"\\n        id=\\\"e3-female\\\"\\n        checked={checked === 'f'}\\n        onChange={handleChange}\\n        text=\\\"female\\\"\\n        value=\\\"f\\\"\\n      />\\n    </div>\\n  </Playground>;\\n}\\n\")), mdx(\"h3\", null, \"Props\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Name\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Default\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"checked\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Whether radio-button is checked or not\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"disabled\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Disable radio-button\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"id\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"HTML id attribute\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"onChange\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"React.ChangeEventHandler<HTMLInputElement>\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Callback when radio-button is clicked\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"priority\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"'default'\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Priority prop to style RadioButton component\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"...\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"HTMLInputElement\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"{}\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Other props are inherited from \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"HTMLInputElement\"))))));\n}\n;\nMDXContent.isMDXComponent = true;"}]}},"staticQueryHashes":["1297603051"]}