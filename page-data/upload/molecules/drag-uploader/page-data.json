{"componentChunkName":"component---node-modules-gatsby-theme-woly-src-templates-usage-js","path":"/upload/molecules/drag-uploader","result":{"pageContext":{"package":"upload","category":"molecules","name":"drag-uploader","pages":[{"type":"usage","meta":{"name":"drag-uploader","category":"molecules","package":"upload"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"DragUploader\"), mdx(\"p\", null, \"Drag and drop for files. To upload files, click or drop file on uploading area, choose files in an opened dialog window.\\nTo set file types, you should set the 'accept' property. You can pass any content to show over uploading area.\\nDragUploader pass priority to style uploading area.\"), mdx(\"h3\", null, \"Example\"), mdx(Playground, {\n    mdxType: \"Playground\"\n  }, mdx(StateEvent, {\n    initial: [],\n    change: function change(files) {\n      return files;\n    },\n    mdxType: \"StateEvent\"\n  }, function (files, change) {\n    return mdx(\"div\", {\n      style: {\n        display: 'flex'\n      }\n    }, mdx(\"div\", {\n      style: {\n        minWidth: '600px',\n        height: '300px',\n        padding: '10px'\n      }\n    }, mdx(DragUploader, {\n      content: mdx(FormBlock, {\n        style: {\n          alignItems: 'center'\n        },\n        mdxType: \"FormBlock\"\n      }, mdx(\"div\", {\n        style: {\n          padding: '10px',\n          textAlign: 'center'\n        }\n      }, files.length === 0 ? mdx(React.Fragment, null, \"Drag 'n' drop some files here, or click to select files\") : mdx(React.Fragment, null, \" You chose \", files.length, \" files\")), mdx(Button, {\n        text: \"Upload files \",\n        priority: \"primary\",\n        mdxType: \"Button\"\n      })),\n      mdxType: \"DragUploader\"\n    })), mdx(\"div\", {\n      style: {\n        padding: '10px'\n      }\n    }, files.map(function (file) {\n      return mdx(\"div\", {\n        key: file.name\n      }, file.name);\n    })));\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Playground>\\n  <StateEvent initial={[]} change={(files) => files}>\\n    {(files, change) => (\\n      <div style={{ display: 'flex' }}>\\n        <div style={{ minWidth: '600px', height: '300px', padding: '10px' }}>\\n          <DragUploader\\n            content={\\n              <FormBlock style={{ alignItems: 'center' }}>\\n                <div style={{ padding: '10px', textAlign: 'center' }}>\\n                  {files.length === 0 ? (\\n                    <>Drag 'n' drop some files here, or click to select files</>\\n                  ) : (\\n                    <> You chose {files.length} files</>\\n                  )}\\n                </div>\\n                <Button text=\\\"Upload files \\\" priority=\\\"primary\\\" />\\n              </FormBlock>\\n            }\\n          />\\n        </div>\\n        <div style={{ padding: '10px' }}>\\n          {files.map((file) => (\\n            <div key={file.name}>{file.name}</div>\\n          ))}\\n        </div>\\n      </div>\\n    )}\\n  </StateEvent>\\n</Playground>\\n\")), mdx(\"h3\", null, \"Load only png files\"), mdx(\"p\", null, \"To set extensions of files that users can upload, you can pass an 'accept' property.\"), mdx(Playground, {\n    mdxType: \"Playground\"\n  }, mdx(StateEvent, {\n    initial: [],\n    change: function change(files) {\n      return files;\n    },\n    mdxType: \"StateEvent\"\n  }, function (files, change) {\n    return mdx(\"div\", {\n      style: {\n        display: 'flex'\n      }\n    }, mdx(\"div\", {\n      style: {\n        minWidth: '600px',\n        height: '300px',\n        padding: '10px'\n      }\n    }, mdx(DragUploader, {\n      content: \"You can upload only png images\",\n      onDrop: change,\n      accept: \"image/png\",\n      center: true,\n      mdxType: \"DragUploader\"\n    })), mdx(\"div\", {\n      style: {\n        padding: '10px'\n      }\n    }, files.map(function (file) {\n      return mdx(\"div\", {\n        key: file.name\n      }, file.name);\n    })));\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Playground>\\n  <StateEvent initial={[]} change={(files) => files}>\\n    {(files, change) => (\\n      <div style={{ display: 'flex' }}>\\n        <div style={{ minWidth: '600px', height: '300px', padding: '10px' }}>\\n          <DragUploader\\n            content=\\\"You can upload only png images\\\"\\n            onDrop={change}\\n            accept=\\\"image/png\\\"\\n            center\\n          />\\n        </div>\\n        <div style={{ padding: '10px' }}>\\n          {files.map((file) => (\\n            <div key={file.name}>{file.name}</div>\\n          ))}\\n        </div>\\n      </div>\\n    )}\\n  </StateEvent>\\n</Playground>\\n\")), mdx(\"h3\", null, \"Disabled DragUploader\"), mdx(Playground, {\n    mdxType: \"Playground\"\n  }, mdx(\"div\", {\n    style: {\n      minWidth: '600px',\n      height: '300px',\n      padding: '10px'\n    }\n  }, mdx(DragUploader, {\n    content: mdx(Button, {\n      text: \"Disabled button\",\n      priority: \"primary\",\n      disabled: true,\n      mdxType: \"Button\"\n    }),\n    disabled: true,\n    center: true,\n    mdxType: \"DragUploader\"\n  }))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Playground>\\n  <div style={{ minWidth: '600px', height: '300px', padding: '10px' }}>\\n    <DragUploader\\n      content={<Button text=\\\"Disabled button\\\" priority=\\\"primary\\\" disabled />}\\n      disabled\\n      center\\n    />\\n  </div>\\n</Playground>\\n\")), mdx(\"h3\", null, \"Props\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Name\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Default\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"accept\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string \\u04CF string[]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"File extensions that are accepted to load\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"content\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"React.ReactNode\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Pass any content within DragUploader component.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"disabled\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"false\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Enable/disable DragUploader\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"maxFiles\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"number\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"0\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Max number of files to load. The default value is 0 which means there is no limitation to how many files are accepted.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"maxSize\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"number\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"Infinity\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Max file size (in bytes)\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"multiple\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"false\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"allow add multiple files\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"onDrop\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"<T extends File>(acceptedFiles: T[], fileRejections: FileRejection[], event: DropEvent) => void;\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Callback for when the drop event occurs\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"priority\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"'secondary'\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Priority prop to style UploaderArea component\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"validator\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"<T extends File>(file: T) => FileError \\\\| FileError[] \\\\| null;\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Fn that validate loaded files\")))));\n}\n;\nMDXContent.isMDXComponent = true;"}]}},"staticQueryHashes":["1297603051"]}