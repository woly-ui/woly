{"componentChunkName":"component---node-modules-gatsby-theme-woly-src-templates-usage-js","path":"/package/woly/component/accordion","result":{"data":{"usage":{"frontmatter":{"name":"accordion","package":"woly","category":"molecules"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar tableHead = [{\n  id: 'id',\n  name: 'Id'\n}, {\n  id: 'firstName',\n  name: 'First name'\n}, {\n  id: 'lastName',\n  name: 'Last name'\n}, {\n  id: 'email',\n  name: 'Email'\n}];\nvar tableRows = [{\n  id: 1,\n  firstName: 'Michael',\n  lastName: 'Smith',\n  email: 'msmith2343@gmail.com'\n}, {\n  id: 2,\n  firstName: 'Jonathan',\n  lastName: 'Kearney',\n  email: 'msmith2343@gmail.com'\n}, {\n  id: 3,\n  firstName: 'Donald',\n  lastName: 'Morrison',\n  email: 'msmith2343@gmail.com'\n}, {\n  id: 4,\n  firstName: 'Tara',\n  lastName: 'Richardson',\n  email: 'msmith2343@gmail.com'\n}];\nvar _frontmatter = {\n  \"name\": \"accordion\",\n  \"category\": \"molecules\",\n  \"package\": \"woly\"\n};\nvar layoutProps = {\n  tableHead: tableHead,\n  tableRows: tableRows,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"The accordion component delivers large amounts of content in a small space through progressive disclosure.\\nThe header title give the user a high level overview of the content allowing the user to decide which sections to read.\"), mdx(\"p\", null, \"Accordions can make information processing.\\nHowever, it does hide content from users, and it\\u2019s important to account for a user not noticing or reading all of the included content.\"), mdx(\"p\", null, \"As ussually accordions are used to organize related information.\\nIn another case, they should be used when space is at a premium and long content cannot be displayed all at once,\\neg in a side panel.\"), mdx(\"h3\", null, \"Example\"), mdx(\"p\", null, \"Accordion`s content and title can be manadged for our own.\"), mdx(Playground, {\n    direction: \"vertical\",\n    mdxType: \"Playground\"\n  }, mdx(React.Fragment, null, mdx(Accordion, {\n    variant: \"primary\",\n    isOpen: false,\n    title: mdx(Text, {\n      type: \"L\",\n      mdxType: \"Text\"\n    }, \"Short recomendation when to use accordion\\xA0\"),\n    mdxType: \"Accordion\"\n  }, mdx(\"ul\", {\n    style: {\n      margin: '0 0 10px 0',\n      paddingLeft: '20px'\n    }\n  }, mdx(\"li\", null, mdx(Text, {\n    type: \"S\",\n    mdxType: \"Text\"\n  }, \"To organize related information\\xA0\")), mdx(\"li\", null, mdx(Text, {\n    type: \"S\",\n    mdxType: \"Text\"\n  }, \"To shorten pages and reduce scrolling when content is not crucial to read in full.\\xA0\")), mdx(\"li\", null, mdx(Text, {\n    type: \"S\",\n    mdxType: \"Text\"\n  }, \"When space is at a premium and long content cannot be displayed all at once, like on a mobile interface or in a side panel.\\xA0\"))), mdx(TextArea, {\n    name: \"name\",\n    placeholder: \"TextArea\",\n    onChange: function onChange() {\n      return console.info('On textarea change');\n    },\n    variant: \"primary\",\n    overflow: \"hidden\",\n    mdxType: \"TextArea\"\n  })), mdx(Accordion, {\n    variant: \"primary\",\n    isOpen: false,\n    title: mdx(Text, {\n      type: \"L\",\n      mdxType: \"Text\"\n    }, \"Short recomendation when to use accordion\\xA0\"),\n    mdxType: \"Accordion\"\n  }, mdx(\"ul\", {\n    style: {\n      margin: '0 0 10px 0',\n      paddingLeft: '20px'\n    }\n  }, mdx(\"li\", null, mdx(Text, {\n    type: \"S\",\n    mdxType: \"Text\"\n  }, \"To organize related information\\xA0\")), mdx(\"li\", null, mdx(Text, {\n    type: \"S\",\n    mdxType: \"Text\"\n  }, \"To shorten pages and reduce scrolling when content is not crucial to read in full.\\xA0\")), mdx(\"li\", null, mdx(Text, {\n    type: \"S\",\n    mdxType: \"Text\"\n  }, \"When space is at a premium and long content cannot be displayed all at once, like on a mobile interface or in a side panel.\\xA0\"))), mdx(TextArea, {\n    name: \"name\",\n    placeholder: \"TextArea\",\n    onChange: function onChange() {\n      return console.info('On textarea change');\n    },\n    variant: \"primary\",\n    overflow: \"hidden\",\n    mdxType: \"TextArea\"\n  })))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Playground direction=\\\"vertical\\\">\\n  <>\\n    <Accordion\\n      variant=\\\"primary\\\"\\n      isOpen={false}\\n      title={<Text type=\\\"L\\\">Short recomendation when to use accordion&nbsp;</Text>}\\n    >\\n      <ul style={{ margin: '0 0 10px 0', paddingLeft: '20px' }}>\\n        <li>\\n          <Text type=\\\"S\\\">To organize related information&nbsp;</Text>\\n        </li>\\n        <li>\\n          <Text type=\\\"S\\\">\\n            To shorten pages and reduce scrolling when content is not crucial to read in full.&nbsp;\\n          </Text>\\n        </li>\\n        <li>\\n          <Text type=\\\"S\\\">\\n            When space is at a premium and long content cannot be displayed all at once, like on a\\n            mobile interface or in a side panel.&nbsp;\\n          </Text>\\n        </li>\\n      </ul>\\n      <TextArea\\n        name=\\\"name\\\"\\n        placeholder=\\\"TextArea\\\"\\n        onChange={() => console.info('On textarea change')}\\n        variant=\\\"primary\\\"\\n        overflow=\\\"hidden\\\"\\n      />\\n    </Accordion>\\n    <Accordion\\n      variant=\\\"primary\\\"\\n      isOpen={false}\\n      title={<Text type=\\\"L\\\">Short recomendation when to use accordion&nbsp;</Text>}\\n    >\\n      <ul style={{ margin: '0 0 10px 0', paddingLeft: '20px' }}>\\n        <li>\\n          <Text type=\\\"S\\\">To organize related information&nbsp;</Text>\\n        </li>\\n        <li>\\n          <Text type=\\\"S\\\">\\n            To shorten pages and reduce scrolling when content is not crucial to read in full.&nbsp;\\n          </Text>\\n        </li>\\n        <li>\\n          <Text type=\\\"S\\\">\\n            When space is at a premium and long content cannot be displayed all at once, like on a\\n            mobile interface or in a side panel.&nbsp;\\n          </Text>\\n        </li>\\n      </ul>\\n      <TextArea\\n        name=\\\"name\\\"\\n        placeholder=\\\"TextArea\\\"\\n        onChange={() => console.info('On textarea change')}\\n        variant=\\\"primary\\\"\\n        overflow=\\\"hidden\\\"\\n      />\\n    </Accordion>\\n  </>\\n</Playground>\\n\")), mdx(\"p\", null, \"Accordion can be closed for default\"), mdx(Playground, {\n    size: \"L\",\n    mdxType: \"Playground\"\n  }, mdx(Accordion, {\n    variant: \"primary\",\n    isOpen: false,\n    title: mdx(Text, {\n      mdxType: \"Text\"\n    }, \"Some text\"),\n    mdxType: \"Accordion\"\n  }, mdx(Table, {\n    columns: tableHead.length,\n    variant: \"primary\",\n    mdxType: \"Table\"\n  }, mdx(Thead, {\n    mdxType: \"Thead\"\n  }, mdx(Tr, {\n    mdxType: \"Tr\"\n  }, tableHead.map(function (_ref2) {\n    var id = _ref2.id,\n        name = _ref2.name;\n    return mdx(Th, {\n      key: id,\n      mdxType: \"Th\"\n    }, name);\n  }))), mdx(Tbody, {\n    mdxType: \"Tbody\"\n  }, tableRows.map(function (row) {\n    return mdx(Tr, {\n      mdxType: \"Tr\"\n    }, tableHead.map(function (_ref3) {\n      var id = _ref3.id;\n      return mdx(Td, {\n        key: id,\n        mdxType: \"Td\"\n      }, row[id]);\n    }));\n  }))))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Playground size=\\\"L\\\">\\n  <Accordion variant=\\\"primary\\\" isOpen={false} title={<Text>Some text</Text>}>\\n    <Table columns={tableHead.length} variant=\\\"primary\\\">\\n      <Thead>\\n        <Tr>\\n          {tableHead.map(({ id, name }) => (\\n            <Th key={id}>{name}</Th>\\n          ))}\\n        </Tr>\\n      </Thead>\\n      <Tbody>\\n        {tableRows.map((row) => (\\n          <Tr>\\n            {tableHead.map(({ id }) => (\\n              <Td key={id}>{row[id]}</Td>\\n            ))}\\n          </Tr>\\n        ))}\\n      </Tbody>\\n    </Table>\\n  </Accordion>\\n</Playground>\\n\")), mdx(\"p\", null, \"or open\"), mdx(Playground, {\n    mdxType: \"Playground\"\n  }, mdx(React.Fragment, null, mdx(Accordion, {\n    variant: \"primary\",\n    isOpen: true,\n    title: mdx(\"span\", null, \"Some text\"),\n    mdxType: \"Accordion\"\n  }, mdx(Table, {\n    columns: tableHead.length,\n    variant: \"primary\",\n    mdxType: \"Table\"\n  }, mdx(Thead, {\n    mdxType: \"Thead\"\n  }, mdx(Tr, {\n    mdxType: \"Tr\"\n  }, tableHead.map(function (_ref4) {\n    var id = _ref4.id,\n        name = _ref4.name;\n    return mdx(Th, {\n      key: id,\n      mdxType: \"Th\"\n    }, name);\n  }))), mdx(Tbody, {\n    mdxType: \"Tbody\"\n  }, tableRows.map(function (row) {\n    return mdx(Tr, {\n      mdxType: \"Tr\"\n    }, tableHead.map(function (_ref5) {\n      var id = _ref5.id;\n      return mdx(Td, {\n        key: id,\n        mdxType: \"Td\"\n      }, row[id]);\n    }));\n  })))), mdx(Accordion, {\n    variant: \"primary\",\n    isOpen: true,\n    title: mdx(\"span\", null, \"Some text\"),\n    mdxType: \"Accordion\"\n  }, mdx(Table, {\n    columns: tableHead.length,\n    variant: \"primary\",\n    mdxType: \"Table\"\n  }, mdx(Thead, {\n    mdxType: \"Thead\"\n  }, mdx(Tr, {\n    mdxType: \"Tr\"\n  }, tableHead.map(function (_ref6) {\n    var id = _ref6.id,\n        name = _ref6.name;\n    return mdx(Th, {\n      key: id,\n      mdxType: \"Th\"\n    }, name);\n  }))), mdx(Tbody, {\n    mdxType: \"Tbody\"\n  }, tableRows.map(function (row) {\n    return mdx(Tr, {\n      mdxType: \"Tr\"\n    }, tableHead.map(function (_ref7) {\n      var id = _ref7.id;\n      return mdx(Td, {\n        key: id,\n        mdxType: \"Td\"\n      }, row[id]);\n    }));\n  })))))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Playground>\\n  <>\\n    <Accordion variant=\\\"primary\\\" isOpen={true} title={<span>Some text</span>}>\\n      <Table columns={tableHead.length} variant=\\\"primary\\\">\\n        <Thead>\\n          <Tr>\\n            {tableHead.map(({ id, name }) => (\\n              <Th key={id}>{name}</Th>\\n            ))}\\n          </Tr>\\n        </Thead>\\n        <Tbody>\\n          {tableRows.map((row) => (\\n            <Tr>\\n              {tableHead.map(({ id }) => (\\n                <Td key={id}>{row[id]}</Td>\\n              ))}\\n            </Tr>\\n          ))}\\n        </Tbody>\\n      </Table>\\n    </Accordion>\\n    <Accordion variant=\\\"primary\\\" isOpen={true} title={<span>Some text</span>}>\\n      <Table columns={tableHead.length} variant=\\\"primary\\\">\\n        <Thead>\\n          <Tr>\\n            {tableHead.map(({ id, name }) => (\\n              <Th key={id}>{name}</Th>\\n            ))}\\n          </Tr>\\n        </Thead>\\n        <Tbody>\\n          {tableRows.map((row) => (\\n            <Tr>\\n              {tableHead.map(({ id }) => (\\n                <Td key={id}>{row[id]}</Td>\\n              ))}\\n            </Tr>\\n          ))}\\n        </Tbody>\\n      </Table>\\n    </Accordion>\\n  </>\\n</Playground>\\n\")), mdx(\"h3\", null, \"Props\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Name\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Default\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Description\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"children\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"React.ReactNode\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Content of accordion\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"isOpen\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"'false'\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Whether the component is visible or not\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"title\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"React.ReactNode\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Title of accordion, that triggers element of accordion\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"variant\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"'secondary'\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Variant prop to style accordion component\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  })))));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"pageID":"4077a633-15b1-518f-84bc-c4c3b227047a"}},"staticQueryHashes":["1158639554"]}