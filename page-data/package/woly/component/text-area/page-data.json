{"componentChunkName":"component---node-modules-gatsby-theme-woly-src-templates-usage-js","path":"/package/woly/component/text-area","result":{"data":{"usage":{"frontmatter":{"name":"text-area","package":"woly","category":"atoms"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"name\": \"text-area\",\n  \"category\": \"atoms\",\n  \"package\": \"woly\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TextArea\"), \" defines a multi-line text input control.\"), mdx(\"p\", null, \"TextArea is often used in a form, to collect user inputs like comments or reviews.\"), mdx(\"h2\", null, \"Example\"), mdx(Playground, {\n    mdxType: \"Playground\"\n  }, mdx(TextArea, {\n    name: \"name\",\n    placeholder: \"Simple text-area\",\n    onChange: function onChange() {\n      return console.info('On textarea change');\n    },\n    variant: \"secondary\",\n    mdxType: \"TextArea\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Playground>\\n  <TextArea\\n    name=\\\"name\\\"\\n    placeholder=\\\"Simple text-area\\\"\\n    onChange={() => console.info('On textarea change')}\\n    variant=\\\"secondary\\\"\\n  />\\n</Playground>\\n\")), mdx(\"h2\", null, \"Variants\"), mdx(\"p\", null, \"Primary and danger variants are should be used to focus user attention.\"), mdx(Playground, {\n    mdxType: \"Playground\"\n  }, mdx(TextArea, {\n    name: \"name\",\n    placeholder: \"Primary\",\n    onChange: function onChange() {\n      return console.info('On textarea change');\n    },\n    variant: \"primary\",\n    mdxType: \"TextArea\"\n  }), mdx(TextArea, {\n    name: \"name\",\n    placeholder: \"Secondary\",\n    onChange: function onChange() {\n      return console.info('On textarea change');\n    },\n    variant: \"secondary\",\n    mdxType: \"TextArea\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Playground>\\n  <TextArea\\n    name=\\\"name\\\"\\n    placeholder=\\\"Primary\\\"\\n    onChange={() => console.info('On textarea change')}\\n    variant=\\\"primary\\\"\\n  />\\n  <TextArea\\n    name=\\\"name\\\"\\n    placeholder=\\\"Secondary\\\"\\n    onChange={() => console.info('On textarea change')}\\n    variant=\\\"secondary\\\"\\n  />\\n</Playground>\\n\")), mdx(\"p\", null, \"Error variant focus user attention on error.\"), mdx(Playground, {\n    mdxType: \"Playground\"\n  }, mdx(TextArea, {\n    name: \"name\",\n    placeholder: \"Primary\",\n    onChange: function onChange() {\n      return console.info('On textarea change');\n    },\n    variant: \"danger\",\n    mdxType: \"TextArea\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Playground>\\n  <TextArea\\n    name=\\\"name\\\"\\n    placeholder=\\\"Primary\\\"\\n    onChange={() => console.info('On textarea change')}\\n    variant=\\\"danger\\\"\\n  />\\n</Playground>\\n\")), mdx(\"h2\", null, \"Disabled\"), mdx(\"p\", null, \"This Boolean attribute indicates that the user cannot interact with the control.\\nIf this attribute is not specified, the control inherits its setting from the containing element;\\nif there is no containing element when the disabled attribute is set, the control is enabled.\"), mdx(Playground, {\n    mdxType: \"Playground\"\n  }, mdx(TextArea, {\n    name: \"name\",\n    placeholder: \"Disabled\",\n    variant: \"primary\",\n    disabled: true,\n    mdxType: \"TextArea\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Playground>\\n  <TextArea name=\\\"name\\\" placeholder=\\\"Disabled\\\" variant=\\\"primary\\\" disabled />\\n</Playground>\\n\")), mdx(\"h2\", null, \"Resize\"), mdx(\"p\", null, \"The resize property defines if (and how) an element is resizable by the user.\"), mdx(Playground, {\n    mdxType: \"Playground\"\n  }, mdx(\"div\", {\n    style: {\n      marginBottom: '60px'\n    }\n  }, mdx(TextArea, {\n    name: \"name\",\n    placeholder: \"Here, the user can resize both the height and width\",\n    onChange: function onChange() {\n      return console.info('On textarea change');\n    },\n    variant: \"primary\",\n    rows: 5,\n    resize: true,\n    mdxType: \"TextArea\"\n  })), mdx(\"div\", {\n    style: {\n      marginBottom: '40px'\n    }\n  }, mdx(TextArea, {\n    name: \"name\",\n    placeholder: \"Oops! You can't resize this textarea\",\n    onChange: function onChange() {\n      return console.info('On textarea change');\n    },\n    variant: \"primary\",\n    mdxType: \"TextArea\"\n  }))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Playground>\\n  <div style={{ marginBottom: '60px' }}>\\n    <TextArea\\n      name=\\\"name\\\"\\n      placeholder=\\\"Here, the user can resize both the height and width\\\"\\n      onChange={() => console.info('On textarea change')}\\n      variant=\\\"primary\\\"\\n      rows={5}\\n      resize\\n    />\\n  </div>\\n  <div style={{ marginBottom: '40px' }}>\\n    <TextArea\\n      name=\\\"name\\\"\\n      placeholder=\\\"Oops! You can't resize this textarea\\\"\\n      onChange={() => console.info('On textarea change')}\\n      variant=\\\"primary\\\"\\n    />\\n  </div>\\n</Playground>\\n\")), mdx(\"h2\", null, \"Cols, rows and wrap\"), mdx(\"p\", null, \"TextArea size can be controlled with number of cols and rows.\"), mdx(\"h3\", null, \"cols\"), mdx(\"p\", null, \"The visible width of the text control, in average character widths.\\nIf it is specified, it must be a positive integer. If it is not specified, the default value is 20.\"), mdx(\"h3\", null, \"rows\"), mdx(\"p\", null, \"The number of visible text lines for the control.\"), mdx(\"h3\", null, \"wrap\"), mdx(\"p\", null, \"Indicates how the control wraps text.\\nPossible values are:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"hard: The browser automatically inserts line breaks, so that each line has no more than the width of the control;\\nthe cols attribute must also be specified for this to take effect.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"soft: The browser ensures that all line breaks in the value consist of a CR+LF pair,\\nbut does not insert any additional line breaks.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"off : Like soft but changes appearance to white-space: pre so line segments exceeding cols are not wrapped\\nand the textarea becomes horizontally scrollable.\"))), mdx(Playground, {\n    mdxType: \"Playground\"\n  }, mdx(TextArea, {\n    name: \"name\",\n    placeholder: \"Hey! Here is 20 cols and it's wrapp off\",\n    onChange: function onChange() {\n      return console.info('On textarea change');\n    },\n    variant: \"primary\",\n    cols: 20,\n    wrap: \"off\",\n    mdxType: \"TextArea\"\n  }), mdx(TextArea, {\n    name: \"name\",\n    placeholder: \"Oops! Textarea consists only 3 rows\",\n    onChange: function onChange() {\n      return console.info('On textarea change');\n    },\n    variant: \"primary\",\n    rows: 3,\n    mdxType: \"TextArea\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Playground>\\n  <TextArea\\n    name=\\\"name\\\"\\n    placeholder=\\\"Hey! Here is 20 cols and it's wrapp off\\\"\\n    onChange={() => console.info('On textarea change')}\\n    variant=\\\"primary\\\"\\n    cols={20}\\n    wrap=\\\"off\\\"\\n  />\\n  <TextArea\\n    name=\\\"name\\\"\\n    placeholder=\\\"Oops! Textarea consists only 3 rows\\\"\\n    onChange={() => console.info('On textarea change')}\\n    variant=\\\"primary\\\"\\n    rows={3}\\n  />\\n</Playground>\\n\")), mdx(\"h2\", null, \"Sizes\"), mdx(\"p\", null, \"Size controlled by the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"component-level\"), \" block property not from the props.\"), mdx(Playground, {\n    mdxType: \"Playground\"\n  }, mdx(block.S, null, mdx(TextArea, {\n    name: \"name\",\n    placeholder: \"Primary\",\n    onChange: function onChange() {\n      return console.info('On textarea change');\n    },\n    variant: \"primary\",\n    mdxType: \"TextArea\"\n  })), mdx(block.M, null, mdx(TextArea, {\n    name: \"name\",\n    placeholder: \"Primary\",\n    onChange: function onChange() {\n      return console.info('On textarea change');\n    },\n    variant: \"primary\",\n    mdxType: \"TextArea\"\n  })), mdx(block.L, null, mdx(TextArea, {\n    name: \"name\",\n    placeholder: \"Primary\",\n    onChange: function onChange() {\n      return console.info('On textarea change');\n    },\n    variant: \"primary\",\n    mdxType: \"TextArea\"\n  })), mdx(block.XL, null, mdx(TextArea, {\n    name: \"name\",\n    placeholder: \"Primary\",\n    onChange: function onChange() {\n      return console.info('On textarea change');\n    },\n    variant: \"primary\",\n    mdxType: \"TextArea\"\n  }))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Playground>\\n  <block.S>\\n    <TextArea\\n      name=\\\"name\\\"\\n      placeholder=\\\"Primary\\\"\\n      onChange={() => console.info('On textarea change')}\\n      variant=\\\"primary\\\"\\n    />\\n  </block.S>\\n  <block.M>\\n    <TextArea\\n      name=\\\"name\\\"\\n      placeholder=\\\"Primary\\\"\\n      onChange={() => console.info('On textarea change')}\\n      variant=\\\"primary\\\"\\n    />\\n  </block.M>\\n  <block.L>\\n    <TextArea\\n      name=\\\"name\\\"\\n      placeholder=\\\"Primary\\\"\\n      onChange={() => console.info('On textarea change')}\\n      variant=\\\"primary\\\"\\n    />\\n  </block.L>\\n  <block.XL>\\n    <TextArea\\n      name=\\\"name\\\"\\n      placeholder=\\\"Primary\\\"\\n      onChange={() => console.info('On textarea change')}\\n      variant=\\\"primary\\\"\\n    />\\n  </block.XL>\\n</Playground>\\n\")), mdx(\"h3\", null, \"Container\"), mdx(\"p\", null, \"TextArea can be placed inside the container. TextArea width is equal to container size.\"), mdx(Playground, {\n    direction: \"horizontal\",\n    mdxType: \"Playground\"\n  }, mdx(block.S, null, mdx(TextArea, {\n    name: \"name\",\n    placeholder: \"Primary\",\n    onChange: function onChange() {\n      return console.info('On textarea change');\n    },\n    variant: \"primary\",\n    mdxType: \"TextArea\"\n  })), mdx(block.S, null, mdx(TextArea, {\n    name: \"name\",\n    placeholder: \"Primary\",\n    onChange: function onChange() {\n      return console.info('On textarea change');\n    },\n    variant: \"primary\",\n    mdxType: \"TextArea\"\n  }))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Playground direction=\\\"horizontal\\\">\\n  <block.S>\\n    <TextArea\\n      name=\\\"name\\\"\\n      placeholder=\\\"Primary\\\"\\n      onChange={() => console.info('On textarea change')}\\n      variant=\\\"primary\\\"\\n    />\\n  </block.S>\\n  <block.S>\\n    <TextArea\\n      name=\\\"name\\\"\\n      placeholder=\\\"Primary\\\"\\n      onChange={() => console.info('On textarea change')}\\n      variant=\\\"primary\\\"\\n    />\\n  </block.S>\\n</Playground>\\n\")), mdx(\"h3\", null, \"Kinds\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Name\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"TextArea\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Base text-area. Useful for creating a new kind of text-area\")))), mdx(\"h3\", null, \"Props\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Name\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Default\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"name\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Name attribute specifies a name of the text-area\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"disabled\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"null\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"HTML disabled attribute\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"value\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"HTMLInputElement['value']\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"null\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Value of text-area field\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"onChange\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"(e: React.ChangeEvent<HTMLInputElement>) => unknown\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Callback when user text-area\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"onKeyDown\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"(event: React.KeyboardEvent<HTMLTextAreaElement>) => unknown\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Callback when user text-area\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"variant\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"'secondary'\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Variant prop to style TextArea component\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"row\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"number\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Number of rows to display\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"cols\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"number\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Number of cols to display\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"wrap\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"The wrap attribute specifies how the text in a text area is to be wrapped\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"resize\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"The resize property defines if (and how) an element is resizable by the user\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"maxLength\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"number\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"The maxlength attribute specifies the maximum length (in characters)\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"minLength\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"number\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"The minlength attribute specifies the maximum length (in characters)\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"overflow\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"The overflow property specifies what should happen if content overflows an element's box\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"placeholder\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"The placeholder represents the placeholder text\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"...\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"HTMLInputElement\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"{}\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Other props are inherited from \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"HTMLInputElement\"))))));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"pageID":"064ee0ac-16ae-5c18-bfd4-be2a14be73c6"}},"staticQueryHashes":["1158639554"]}