{"componentChunkName":"component---node-modules-gatsby-theme-woly-src-templates-usage-js","path":"/package/woly/component/list","result":{"data":{"usage":{"frontmatter":{"name":"list","package":"woly","category":"atoms"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"name\": \"list\",\n  \"category\": \"atoms\",\n  \"package\": \"woly\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"List\"), \" is a list of items related to a single object.\\nA List displays a list of choices on a temporary surface. It appears when the user interacts with a button, or other control.\\nThis component can be used in list dropdown or input autosuggestion components.\"), mdx(\"p\", null, \"Simple lists open over the anchor element by default.\\nWhen close to a screen edge, simple lists vertically realign to make sure that all list items are completely visible.\"), mdx(\"p\", null, \"ListItem\\nThis component defines a selectable item in a List. It should only be used as a descendant of a List.\\nIt does not need to be a direct child of the List component.\"), mdx(\"h3\", null, \"Example\"), mdx(Playground, {\n    mdxType: \"Playground\"\n  }, mdx(List, {\n    list: [{\n      id: 0,\n      text: 'Red'\n    }, {\n      id: 1,\n      text: 'Green'\n    }, {\n      id: 2,\n      text: 'Blue'\n    }],\n    mdxType: \"List\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Playground>\\n  <List\\n      list={[\\n        { id: 0, text: 'Red' },\\n        { id: 1, text: 'Green' },\\n        { id: 2, text: 'Blue' },\\n      ]}\\n    />\\n</Playground>\\n\")), mdx(\"h3\", null, \"Icons\"), mdx(\"p\", null, \"listList items can consist icon on the left side or the right. Use icons on the both sides is not recommended.\"), mdx(Playground, {\n    mdxType: \"Playground\"\n  }, mdx(List, {\n    list: [{\n      left: mdx(InfoIcon, {\n        mdxType: \"InfoIcon\"\n      }),\n      id: 0,\n      text: 'Red',\n      onClick: function onClick() {\n        return alert('Item clicked');\n      }\n    }, {\n      left: mdx(InfoIcon, {\n        mdxType: \"InfoIcon\"\n      }),\n      id: 1,\n      text: 'Green'\n    }, {\n      left: mdx(InfoIcon, {\n        mdxType: \"InfoIcon\"\n      }),\n      id: 2,\n      text: 'Blue'\n    }],\n    mdxType: \"List\"\n  }), mdx(List, {\n    list: [{\n      id: 0,\n      text: 'Red',\n      right: mdx(Check, {\n        mdxType: \"Check\"\n      })\n    }, {\n      id: 1,\n      text: 'Green',\n      right: mdx(Check, {\n        mdxType: \"Check\"\n      })\n    }, {\n      id: 2,\n      text: 'Blue',\n      right: mdx(Check, {\n        mdxType: \"Check\"\n      })\n    }],\n    mdxType: \"List\"\n  }), mdx(List, {\n    list: [{\n      left: mdx(InfoIcon, {\n        mdxType: \"InfoIcon\"\n      }),\n      id: 0,\n      text: 'Red',\n      right: mdx(Check, {\n        mdxType: \"Check\"\n      }),\n      onClick: function onClick() {\n        return alert('Item clicked');\n      }\n    }, {\n      left: mdx(InfoIcon, {\n        mdxType: \"InfoIcon\"\n      }),\n      id: 1,\n      text: 'Green',\n      right: mdx(Check, {\n        mdxType: \"Check\"\n      })\n    }, {\n      left: mdx(InfoIcon, {\n        mdxType: \"InfoIcon\"\n      }),\n      id: 2,\n      text: 'Blue',\n      right: mdx(Check, {\n        mdxType: \"Check\"\n      })\n    }],\n    mdxType: \"List\"\n  }), mdx(List, {\n    list: [{\n      left: mdx(InfoIcon, {\n        mdxType: \"InfoIcon\"\n      }),\n      id: 0,\n      text: 'Red',\n      right: mdx(Check, {\n        mdxType: \"Check\"\n      }),\n      disabled: true\n    }, {\n      left: mdx(InfoIcon, {\n        mdxType: \"InfoIcon\"\n      }),\n      id: 1,\n      text: 'Green',\n      right: mdx(Check, {\n        mdxType: \"Check\"\n      })\n    }, {\n      left: mdx(InfoIcon, {\n        mdxType: \"InfoIcon\"\n      }),\n      id: 2,\n      text: 'Blue',\n      right: mdx(Check, {\n        mdxType: \"Check\"\n      }),\n      disabled: true\n    }],\n    mdxType: \"List\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"  <Playground>\\n    <List\\n      list={[\\n        { left: <InfoIcon/>, id: 0, text: 'Red', onClick: () => alert('Item clicked') },\\n        { left: <InfoIcon/>, id: 1, text: 'Green' },\\n        { left: <InfoIcon/>, id: 2, text: 'Blue' },\\n      ]}\\n    />\\n    <List\\n      list={[\\n        {  id: 0, text: 'Red', right: <Check/> },\\n        {  id: 1, text: 'Green', right: <Check/> },\\n        {  id: 2, text: 'Blue', right: <Check/> },\\n      ]}\\n    />\\n    <List\\n      list={[\\n        { left: <InfoIcon/>, id: 0, text: 'Red', right: <Check/>, onClick: () => alert('Item clicked')},\\n        { left: <InfoIcon/>, id: 1, text: 'Green', right: <Check/> },\\n        { left: <InfoIcon/>, id: 2, text: 'Blue', right: <Check/> },\\n      ]}\\n    />\\n     <List\\n      list={[\\n        { left: <InfoIcon/>, id: 0, text: 'Red', right: <Check/>, disabled: true },\\n        { left: <InfoIcon/>, id: 1, text: 'Green', right: <Check/> },\\n        { left: <InfoIcon/>, id: 2, text: 'Blue', right: <Check/>, disabled: true },\\n      ]}\\n    />\\n </Playground>\\n\")), mdx(\"h3\", null, \"Sizes\"), mdx(\"p\", null, \"Size controlled by the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"component-level\"), \" block property not from the props.\"), mdx(Playground, {\n    mdxType: \"Playground\"\n  }, mdx(block.S, null, mdx(List, {\n    list: [{\n      left: mdx(InfoIcon, {\n        mdxType: \"InfoIcon\"\n      }),\n      id: 0,\n      text: 'Red'\n    }, {\n      left: mdx(InfoIcon, {\n        mdxType: \"InfoIcon\"\n      }),\n      id: 1,\n      text: 'Green'\n    }, {\n      left: mdx(InfoIcon, {\n        mdxType: \"InfoIcon\"\n      }),\n      id: 2,\n      text: 'Blue'\n    }],\n    mdxType: \"List\"\n  })), mdx(block.L, null, mdx(List, {\n    list: [{\n      left: mdx(InfoIcon, {\n        mdxType: \"InfoIcon\"\n      }),\n      id: 0,\n      text: 'Red'\n    }, {\n      left: mdx(InfoIcon, {\n        mdxType: \"InfoIcon\"\n      }),\n      id: 1,\n      text: 'Green'\n    }, {\n      left: mdx(InfoIcon, {\n        mdxType: \"InfoIcon\"\n      }),\n      id: 2,\n      text: 'Blue'\n    }],\n    mdxType: \"List\"\n  })), mdx(block.XL, null, mdx(List, {\n    list: [{\n      left: mdx(InfoIcon, {\n        mdxType: \"InfoIcon\"\n      }),\n      id: 0,\n      text: 'Red'\n    }, {\n      left: mdx(InfoIcon, {\n        mdxType: \"InfoIcon\"\n      }),\n      id: 1,\n      text: 'Green'\n    }, {\n      left: mdx(InfoIcon, {\n        mdxType: \"InfoIcon\"\n      }),\n      id: 2,\n      text: 'Blue'\n    }],\n    mdxType: \"List\"\n  }))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Playground>\\n  <block.S>\\n    <List\\n      list={[\\n        { left: <InfoIcon/>, id: 0, text: 'Red' },\\n        { left: <InfoIcon/>, id: 1, text: 'Green' },\\n        { left: <InfoIcon/>, id: 2, text: 'Blue' },\\n      ]}\\n    />\\n  </block.S>\\n  <block.L>\\n    <List\\n      list={[\\n        { left: <InfoIcon/>, id: 0, text: 'Red' },\\n        { left: <InfoIcon/>, id: 1, text: 'Green' },\\n        { left: <InfoIcon/>, id: 2, text: 'Blue' },\\n      ]}\\n    />\\n  </block.L>\\n  <block.XL>\\n    <List\\n      list={[\\n        { left: <InfoIcon/>, id: 0, text: 'Red' },\\n        { left: <InfoIcon/>, id: 1, text: 'Green' },\\n        { left: <InfoIcon/>, id: 2, text: 'Blue' },\\n      ]}\\n    />\\n  </block.XL>\\n</Playground>\\n\")), mdx(\"h3\", null, \"Kinds\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Name\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"List\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Base List. Useful for creating a new kind of List\")))), mdx(\"h3\", null, \"Props\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Name\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Default\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"list\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"Array<React.ReactNode>\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"An array of List items\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"variant\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"'default'\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Variant prop to style List component\")))));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"pageID":"ca0ea54c-155b-5c64-a7da-dd14b23d7edb"}},"staticQueryHashes":["1158639554"]}