{"componentChunkName":"component---node-modules-gatsby-theme-woly-src-templates-usage-js","path":"/package/woly/component/list","result":{"data":{"usage":{"frontmatter":{"name":"list","package":"woly","category":"atoms"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar links = [{\n  id: \"fwed324fcse\",\n  content: \"John\",\n  disabled: false\n}, {\n  id: \"fwed32q4fcss\",\n  content: \"Alex\",\n  disabled: true\n}, {\n  id: \"fwed32q4fcsw\",\n  content: \"Michael\",\n  disabled: false\n}, {\n  id: \"fwed32q4fcsb\",\n  content: \"Donald\",\n  disabled: false\n}];\nvar _frontmatter = {\n  \"name\": \"list\",\n  \"category\": \"atoms\",\n  \"package\": \"woly\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar List = makeShortcode(\"List\");\nvar layoutProps = {\n  links: links,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"List\"), \" is a list of items related to a single object.\\nA List displays a list of choices on a temporary surface. It appears when the user interacts with a button, or other control.\\nThis component can be used in list dropdown or input autosuggestion components.\"), mdx(\"p\", null, \"Simple lists open over the anchor element by default.\\nWhen close to a screen edge, simple lists vertically realign to make sure that all list items are completely visible.\"), mdx(\"p\", null, \"ListItem\\nThis component defines a selectable item in a List. It should only be used as a descendant of a List.\\nIt does not need to be a direct child of the List component.\"), mdx(\"h3\", null, \"Example List\"), mdx(Playground, {\n    mdxType: \"Playground\"\n  }, mdx(block.L, null, mdx(ListContainer, {\n    variant: \"primary\",\n    style: {\n      width: '100%'\n    },\n    mdxType: \"ListContainer\"\n  }, links.map(function (_ref2) {\n    var id = _ref2.id,\n        content = _ref2.content,\n        disabled = _ref2.disabled;\n    return mdx(ListItem, {\n      key: id,\n      as: \"a\",\n      href: \"#\".concat(id),\n      disabled: disabled,\n      text: content,\n      iconRight: mdx(InfoIcon, {\n        mdxType: \"InfoIcon\"\n      }),\n      iconLeft: mdx(InfoIcon, {\n        mdxType: \"InfoIcon\"\n      }),\n      mdxType: \"ListItem\"\n    });\n  })))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Playground>\\n  <block.L>\\n    <ListContainer variant=\\\"primary\\\" style={{ width: '100%' }}>\\n      {links.map(({ id, content, disabled }) => (\\n        <ListItem\\n          key={id}\\n          as=\\\"a\\\"\\n          href={`#${id}`}\\n          disabled={disabled}\\n          text={content}\\n          iconRight={<InfoIcon />}\\n          iconLeft={<InfoIcon />}\\n        />\\n      ))}\\n    </ListContainer>\\n  </block.L>\\n</Playground>\\n\")), mdx(\"h3\", null, \"Example dropdown list\"), mdx(Playground, {\n    mdxType: \"Playground\"\n  }, mdx(Surface, {\n    mdxType: \"Surface\"\n  }, mdx(ListContainer, {\n    variant: \"primary\",\n    style: {\n      width: '100%'\n    },\n    as: \"ul\",\n    mdxType: \"ListContainer\"\n  }, links.map(function (_ref3) {\n    var id = _ref3.id,\n        content = _ref3.content;\n    return mdx(ListItem, {\n      as: \"li\",\n      tabIndex: 1,\n      key: id,\n      onClick: function onClick() {\n        console.log(id);\n      },\n      text: content,\n      mdxType: \"ListItem\"\n    });\n  })))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Playground>\\n  <Surface>\\n    <ListContainer variant=\\\"primary\\\" style={{ width: '100%' }} as=\\\"ul\\\">\\n      {links.map(({ id, content }) => (\\n        <ListItem\\n          as=\\\"li\\\"\\n          tabIndex={1}\\n          key={id}\\n          onClick={() => {\\n            console.log(id);\\n          }}\\n          text={content}\\n        />\\n      ))}\\n    </ListContainer>\\n  </Surface>\\n</Playground>\\n\")), mdx(\"h3\", null, \"Example List with Input, Checkboxes and Button\"), mdx(Playground, {\n    mdxType: \"Playground\"\n  }, mdx(block.L, null, mdx(State, {\n    initial: false,\n    change: function change(i) {\n      return !i;\n    },\n    mdxType: \"State\"\n  }, function (value, change) {\n    return mdx(ListContainer, {\n      variant: \"primary\",\n      style: {\n        width: '100%'\n      },\n      mdxType: \"ListContainer\"\n    }, mdx(Surface, {\n      mdxType: \"Surface\"\n    }, mdx(Input, {\n      name: \"name\",\n      onChange: function onChange(event) {\n        return console.info('On input change');\n      },\n      placeholder: \"Enter your name here\",\n      type: \"text\",\n      variant: \"primary\",\n      mdxType: \"Input\"\n    }), links.map(function (_ref4) {\n      var id = _ref4.id,\n          content = _ref4.content;\n      return mdx(Checkbox, {\n        checked: value,\n        id: \"small\",\n        onChange: change,\n        text: content,\n        variant: \"primary\",\n        key: id,\n        mdxType: \"Checkbox\"\n      });\n    }), mdx(\"div\", {\n      style: {\n        display: 'flex',\n        flexDirection: 'column'\n      }\n    }, mdx(Button, {\n      text: \"Show more\",\n      variant: \"primary\",\n      mdxType: \"Button\"\n    }))));\n  }))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Playground>\\n  <block.L>\\n    <State initial={false} change={(i) => !i}>\\n      {(value, change) => (\\n        <ListContainer variant=\\\"primary\\\" style={{ width: '100%' }}>\\n          <Surface>\\n            <Input\\n              name=\\\"name\\\"\\n              onChange={(event) => console.info('On input change')}\\n              placeholder=\\\"Enter your name here\\\"\\n              type=\\\"text\\\"\\n              variant=\\\"primary\\\"\\n            />\\n            {links.map(({ id, content }) => (\\n              <Checkbox\\n                checked={value}\\n                id=\\\"small\\\"\\n                onChange={change}\\n                text={content}\\n                variant=\\\"primary\\\"\\n                key={id}\\n              />\\n            ))}\\n            <div style={{ display: 'flex', flexDirection: 'column' }}>\\n              <Button text=\\\"Show more\\\" variant=\\\"primary\\\" />\\n            </div>\\n          </Surface>\\n        </ListContainer>\\n      )}\\n    </State>\\n  </block.L>\\n</Playground>\\n\")), mdx(\"h3\", null, \"Icons\"), mdx(\"p\", null, \"List items can have an icon on the left or/and the right side. To use icons on both sides is not recommended.\"), mdx(Playground, {\n    mdxType: \"Playground\"\n  }, mdx(Surface, {\n    variant: \"primary\",\n    mdxType: \"Surface\"\n  }, mdx(ListContainer, {\n    style: {\n      width: '100%'\n    },\n    mdxType: \"ListContainer\"\n  }, links.map(function (_ref5) {\n    var id = _ref5.id,\n        content = _ref5.content,\n        disabled = _ref5.disabled;\n    return mdx(ListItem, {\n      key: id,\n      as: \"a\",\n      href: \"#\".concat(id),\n      disabled: disabled,\n      text: content,\n      mdxType: \"ListItem\"\n    });\n  }))), mdx(Surface, {\n    variant: \"primary\",\n    mdxType: \"Surface\"\n  }, mdx(ListContainer, {\n    style: {\n      width: '100%'\n    },\n    mdxType: \"ListContainer\"\n  }, links.map(function (_ref6) {\n    var id = _ref6.id,\n        content = _ref6.content,\n        disabled = _ref6.disabled;\n    return mdx(ListItem, {\n      key: id,\n      as: \"a\",\n      href: \"#\".concat(id),\n      disabled: disabled,\n      text: content,\n      iconLeft: mdx(InfoIcon, {\n        mdxType: \"InfoIcon\"\n      }),\n      mdxType: \"ListItem\"\n    });\n  }))), mdx(Surface, {\n    variant: \"primary\",\n    mdxType: \"Surface\"\n  }, mdx(ListContainer, {\n    style: {\n      width: '100%'\n    },\n    mdxType: \"ListContainer\"\n  }, links.map(function (_ref7) {\n    var id = _ref7.id,\n        content = _ref7.content,\n        disabled = _ref7.disabled;\n    return mdx(ListItem, {\n      key: id,\n      as: \"a\",\n      href: \"#\".concat(id),\n      disabled: disabled,\n      text: content,\n      iconRight: mdx(InfoIcon, {\n        mdxType: \"InfoIcon\"\n      }),\n      mdxType: \"ListItem\"\n    });\n  }))), mdx(Surface, {\n    variant: \"primary\",\n    mdxType: \"Surface\"\n  }, mdx(ListContainer, {\n    style: {\n      width: '100%'\n    },\n    mdxType: \"ListContainer\"\n  }, links.map(function (_ref8) {\n    var id = _ref8.id,\n        content = _ref8.content,\n        disabled = _ref8.disabled;\n    return mdx(ListItem, {\n      key: id,\n      as: \"a\",\n      href: \"#\".concat(id),\n      disabled: disabled,\n      text: content,\n      iconRight: mdx(InfoIcon, {\n        mdxType: \"InfoIcon\"\n      }),\n      iconLeft: mdx(InfoIcon, {\n        mdxType: \"InfoIcon\"\n      }),\n      mdxType: \"ListItem\"\n    });\n  })))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Playground>\\n  <Surface variant=\\\"primary\\\">\\n    <ListContainer style={{ width: '100%' }}>\\n      {links.map(({ id, content, disabled }) => (\\n        <ListItem key={id} as=\\\"a\\\" href={`#${id}`} disabled={disabled} text={content} />\\n      ))}\\n    </ListContainer>\\n  </Surface>\\n  <Surface variant=\\\"primary\\\">\\n    <ListContainer style={{ width: '100%' }}>\\n      {links.map(({ id, content, disabled }) => (\\n        <ListItem\\n          key={id}\\n          as=\\\"a\\\"\\n          href={`#${id}`}\\n          disabled={disabled}\\n          text={content}\\n          iconLeft={<InfoIcon />}\\n        />\\n      ))}\\n    </ListContainer>\\n  </Surface>\\n  <Surface variant=\\\"primary\\\">\\n    <ListContainer style={{ width: '100%' }}>\\n      {links.map(({ id, content, disabled }) => (\\n        <ListItem\\n          key={id}\\n          as=\\\"a\\\"\\n          href={`#${id}`}\\n          disabled={disabled}\\n          text={content}\\n          iconRight={<InfoIcon />}\\n        />\\n      ))}\\n    </ListContainer>\\n  </Surface>\\n  <Surface variant=\\\"primary\\\">\\n    <ListContainer style={{ width: '100%' }}>\\n      {links.map(({ id, content, disabled }) => (\\n        <ListItem\\n          key={id}\\n          as=\\\"a\\\"\\n          href={`#${id}`}\\n          disabled={disabled}\\n          text={content}\\n          iconRight={<InfoIcon />}\\n          iconLeft={<InfoIcon />}\\n        />\\n      ))}\\n    </ListContainer>\\n  </Surface>\\n</Playground>\\n\")), mdx(\"h3\", null, \"Sizes\"), mdx(\"p\", null, \"Size of list item is controlled by the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"component-level\"), \" block property not from the props.\"), mdx(Playground, {\n    mdxType: \"Playground\"\n  }, mdx(block.S, null, mdx(ListContainer, {\n    variant: \"primary\",\n    style: {\n      width: '100%'\n    },\n    mdxType: \"ListContainer\"\n  }, links.map(function (_ref9) {\n    var id = _ref9.id,\n        content = _ref9.content,\n        disabled = _ref9.disabled;\n    return mdx(ListItem, {\n      key: id,\n      as: \"a\",\n      href: \"#\".concat(id),\n      disabled: disabled,\n      text: content,\n      iconRight: mdx(InfoIcon, {\n        mdxType: \"InfoIcon\"\n      }),\n      iconLeft: mdx(InfoIcon, {\n        mdxType: \"InfoIcon\"\n      }),\n      mdxType: \"ListItem\"\n    });\n  }))), mdx(block.M, null, mdx(List, {\n    variant: \"primary\",\n    list: [{\n      left: mdx(InfoIcon, {\n        mdxType: \"InfoIcon\"\n      }),\n      id: 0,\n      text: 'Red'\n    }, {\n      left: mdx(InfoIcon, {\n        mdxType: \"InfoIcon\"\n      }),\n      id: 1,\n      text: 'Green'\n    }, {\n      left: mdx(InfoIcon, {\n        mdxType: \"InfoIcon\"\n      }),\n      id: 2,\n      text: 'Blue'\n    }],\n    mdxType: \"List\"\n  })), mdx(block.L, null, mdx(ListContainer, {\n    variant: \"primary\",\n    style: {\n      width: '100%'\n    },\n    mdxType: \"ListContainer\"\n  }, links.map(function (_ref10) {\n    var id = _ref10.id,\n        content = _ref10.content,\n        disabled = _ref10.disabled;\n    return mdx(ListItem, {\n      key: id,\n      as: \"a\",\n      href: \"#\".concat(id),\n      disabled: disabled,\n      text: content,\n      iconRight: mdx(InfoIcon, {\n        mdxType: \"InfoIcon\"\n      }),\n      iconLeft: mdx(InfoIcon, {\n        mdxType: \"InfoIcon\"\n      }),\n      mdxType: \"ListItem\"\n    });\n  }))), mdx(block.XL, null, mdx(ListContainer, {\n    variant: \"primary\",\n    style: {\n      width: '100%'\n    },\n    as: \"ul\",\n    mdxType: \"ListContainer\"\n  }, links.map(function (_ref11) {\n    var id = _ref11.id,\n        content = _ref11.content,\n        disabled = _ref11.disabled;\n    return mdx(ListItem, {\n      as: \"a\",\n      disabled: disabled,\n      href: \"#\".concat(id),\n      iconLeft: mdx(InfoIcon, {\n        mdxType: \"InfoIcon\"\n      }),\n      iconRight: mdx(InfoIcon, {\n        mdxType: \"InfoIcon\"\n      }),\n      key: id,\n      text: content,\n      variant: \"primary\",\n      mdxType: \"ListItem\"\n    });\n  }))), mdx(block.H, null, mdx(List, {\n    variant: \"primary\",\n    list: [{\n      left: mdx(InfoIcon, {\n        mdxType: \"InfoIcon\"\n      }),\n      id: 0,\n      text: 'Red'\n    }, {\n      left: mdx(InfoIcon, {\n        mdxType: \"InfoIcon\"\n      }),\n      id: 1,\n      text: 'Green'\n    }, {\n      left: mdx(InfoIcon, {\n        mdxType: \"InfoIcon\"\n      }),\n      id: 2,\n      text: 'Blue'\n    }],\n    mdxType: \"List\"\n  }))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Playground>\\n  <block.S>\\n    <ListContainer variant=\\\"primary\\\" style={{ width: '100%' }}>\\n      {links.map(({ id, content, disabled }) => (\\n        <ListItem\\n          key={id}\\n          as=\\\"a\\\"\\n          href={`#${id}`}\\n          disabled={disabled}\\n          text={content}\\n          iconRight={<InfoIcon />}\\n          iconLeft={<InfoIcon />}\\n        />\\n      ))}\\n    </ListContainer>\\n  </block.S>\\n  <block.M>\\n    <List\\n      variant=\\\"primary\\\"\\n      list={[\\n        { left: <InfoIcon />, id: 0, text: 'Red' },\\n        { left: <InfoIcon />, id: 1, text: 'Green' },\\n        { left: <InfoIcon />, id: 2, text: 'Blue' },\\n      ]}\\n    />\\n  </block.M>\\n  <block.L>\\n    <ListContainer variant=\\\"primary\\\" style={{ width: '100%' }}>\\n      {links.map(({ id, content, disabled }) => (\\n        <ListItem\\n          key={id}\\n          as=\\\"a\\\"\\n          href={`#${id}`}\\n          disabled={disabled}\\n          text={content}\\n          iconRight={<InfoIcon />}\\n          iconLeft={<InfoIcon />}\\n        />\\n      ))}\\n    </ListContainer>\\n  </block.L>\\n  <block.XL>\\n    <ListContainer variant=\\\"primary\\\" style={{ width: '100%' }} as=\\\"ul\\\">\\n      {links.map(({ id, content, disabled }) => (\\n        <ListItem\\n          as=\\\"a\\\"\\n          disabled={disabled}\\n          href={`#${id}`}\\n          iconLeft={<InfoIcon />}\\n          iconRight={<InfoIcon />}\\n          key={id}\\n          text={content}\\n          variant=\\\"primary\\\"\\n        />\\n      ))}\\n    </ListContainer>\\n  </block.XL>\\n  <block.H>\\n    <List\\n      variant=\\\"primary\\\"\\n      list={[\\n        { left: <InfoIcon />, id: 0, text: 'Red' },\\n        { left: <InfoIcon />, id: 1, text: 'Green' },\\n        { left: <InfoIcon />, id: 2, text: 'Blue' },\\n      ]}\\n    />\\n  </block.H>\\n</Playground>\\n\")), mdx(\"h3\", null, \"Kinds\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Name\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"List\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Base List. Useful for creating a new kind of List\")))), mdx(\"h3\", null, \"ListItem Props\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Name\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Default\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"as\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"'a' \\u04CF 'li'\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Use as to set tag for element\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"disabled\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"false \")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"disabled attribute\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"href\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"href attribute\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"iconLeft\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"React.ReactNode\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Left icon\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"iconRight\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"React.ReactNode\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Right icon\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"tabIndex\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"number\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"set tabIndex to list item\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"text\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"text of list item\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"variant\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"'default'\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Variant prop to style List component\")))), mdx(\"h3\", null, \"ListContainer Props\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Name\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Default\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"variant\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"'secondary'\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Variant prop to style ListContainer component\")))));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"pageID":"ca0ea54c-155b-5c64-a7da-dd14b23d7edb"}},"staticQueryHashes":["1158639554"]}