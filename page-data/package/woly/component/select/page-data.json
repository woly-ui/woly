{"componentChunkName":"component---node-modules-gatsby-theme-woly-src-templates-usage-js","path":"/package/woly/component/select","result":{"data":{"usage":{"frontmatter":{"name":"select","package":"woly","category":"molecules"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"name\": \"select\",\n  \"category\": \"molecules\",\n  \"package\": \"woly\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Select\"), \" component to choose single option from list of options.\"), mdx(\"h3\", null, \"Example\"), mdx(\"p\", null, \"Use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Select\"), \" to choose one option from dropdown. You can pass \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"placeholder\"), \" if you don't have initial selected value.\\nEach option has data attribute \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"data-value\"), \" where value of option is saved.\"), mdx(Playground, {\n    size: \"S\",\n    mdxType: \"Playground\"\n  }, mdx(\"div\", {\n    style: {\n      height: '150px'\n    }\n  }, mdx(StateEvent, {\n    initial: null,\n    change: function change(event) {\n      var _event$target;\n\n      return event === null || event === void 0 ? void 0 : (_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.dataset.value;\n    },\n    mdxType: \"StateEvent\"\n  }, function (value, change) {\n    return mdx(Select, {\n      icon: mdx(ArrowDown, {\n        mdxType: \"ArrowDown\"\n      }),\n      onChange: change,\n      options: [{\n        children: 'Toyota',\n        value: 'Toyota'\n      }, {\n        children: 'Opel',\n        value: 'Opel'\n      }, {\n        children: 'BMW',\n        value: 'BMW'\n      }],\n      placeholder: \"Choose an option\",\n      selected: value,\n      variant: \"secondary\",\n      mdxType: \"Select\"\n    });\n  }))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Playground size=\\\"S\\\">\\n  <div style={{ height: '150px' }}>\\n    <StateEvent initial={null} change={(event) => event?.target?.dataset.value}>\\n      {(value, change) => (\\n        <Select\\n          icon={<ArrowDown />}\\n          onChange={change}\\n          options={[\\n            { children: 'Toyota', value: 'Toyota' },\\n            { children: 'Opel', value: 'Opel' },\\n            { children: 'BMW', value: 'BMW' },\\n          ]}\\n          placeholder=\\\"Choose an option\\\"\\n          selected={value}\\n          variant=\\\"secondary\\\"\\n        />\\n      )}\\n    </StateEvent>\\n  </div>\\n</Playground>\\n\")), mdx(\"h3\", null, \"Selected value\"), mdx(\"p\", null, \"Or you can pass initial selected value.\"), mdx(Playground, {\n    size: \"S\",\n    mdxType: \"Playground\"\n  }, mdx(\"div\", {\n    style: {\n      height: '150px'\n    }\n  }, mdx(StateEvent, {\n    initial: \"Cats\",\n    change: function change(event) {\n      var _event$target2;\n\n      return event === null || event === void 0 ? void 0 : (_event$target2 = event.target) === null || _event$target2 === void 0 ? void 0 : _event$target2.dataset.value;\n    },\n    mdxType: \"StateEvent\"\n  }, function (value, change) {\n    return mdx(\"div\", {\n      style: {\n        display: 'flex'\n      }\n    }, mdx(Select, {\n      icon: mdx(ArrowDown, {\n        mdxType: \"ArrowDown\"\n      }),\n      onChange: change,\n      options: [{\n        children: 'Cats',\n        value: 'Cats'\n      }, {\n        children: 'Dogs',\n        value: 'Dogs'\n      }, {\n        children: 'Birds',\n        value: 'Birds'\n      }],\n      selected: value,\n      variant: \"secondary\",\n      mdxType: \"Select\"\n    }), mdx(\"div\", {\n      style: {\n        marginLeft: '10px'\n      }\n    }, mdx(Select, {\n      icon: mdx(ArrowDown, {\n        mdxType: \"ArrowDown\"\n      }),\n      onChange: function onChange() {},\n      options: [{\n        children: 'Toyota',\n        value: 'Toyota'\n      }, {\n        children: 'Opel',\n        value: 'Opel'\n      }, {\n        children: 'BMW',\n        value: 'BMW'\n      }],\n      selected: \"BMW\",\n      isDisabled: true,\n      mdxType: \"Select\"\n    })));\n  }))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Playground size=\\\"S\\\">\\n  <div style={{ height: '150px' }}>\\n    <StateEvent initial=\\\"Cats\\\" change={(event) => event?.target?.dataset.value}>\\n      {(value, change) => (\\n        <div style={{ display: 'flex' }}>\\n          <Select\\n            icon={<ArrowDown />}\\n            onChange={change}\\n            options={[\\n              { children: 'Cats', value: 'Cats' },\\n              { children: 'Dogs', value: 'Dogs' },\\n              { children: 'Birds', value: 'Birds' },\\n            ]}\\n            selected={value}\\n            variant=\\\"secondary\\\"\\n          />\\n          <div style={{ marginLeft: '10px' }}>\\n            <Select\\n              icon={<ArrowDown />}\\n              onChange={() => {}}\\n              options={[\\n                { children: 'Toyota', value: 'Toyota' },\\n                { children: 'Opel', value: 'Opel' },\\n                { children: 'BMW', value: 'BMW' },\\n              ]}\\n              selected=\\\"BMW\\\"\\n              isDisabled\\n            />\\n          </div>\\n        </div>\\n      )}\\n    </StateEvent>\\n  </div>\\n</Playground>\\n\")), mdx(\"h3\", null, \"Variants\"), mdx(\"p\", null, \"Secondary variant should be used as default variant.\"), mdx(Playground, {\n    size: \"S\",\n    mdxType: \"Playground\"\n  }, mdx(\"div\", {\n    style: {\n      height: '150px'\n    }\n  }, mdx(StateEvent, {\n    initial: null,\n    change: function change(event) {\n      var _event$target3;\n\n      return event === null || event === void 0 ? void 0 : (_event$target3 = event.target) === null || _event$target3 === void 0 ? void 0 : _event$target3.dataset.value;\n    },\n    mdxType: \"StateEvent\"\n  }, function (value, change) {\n    return mdx(Select, {\n      icon: mdx(ArrowDown, {\n        mdxType: \"ArrowDown\"\n      }),\n      onChange: change,\n      options: [{\n        children: 'Toyota',\n        value: 'Toyota'\n      }, {\n        children: 'Opel',\n        value: 'Opel'\n      }, {\n        children: 'BMW',\n        value: 'BMW'\n      }],\n      placeholder: \"Choose an option\",\n      selected: value,\n      variant: \"secondary\",\n      mdxType: \"Select\"\n    });\n  }))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Playground size=\\\"S\\\">\\n  <div style={{ height: '150px' }}>\\n    <StateEvent initial={null} change={(event) => event?.target?.dataset.value}>\\n      {(value, change) => (\\n        <Select\\n          icon={<ArrowDown />}\\n          onChange={change}\\n          options={[\\n            { children: 'Toyota', value: 'Toyota' },\\n            { children: 'Opel', value: 'Opel' },\\n            { children: 'BMW', value: 'BMW' },\\n          ]}\\n          placeholder=\\\"Choose an option\\\"\\n          selected={value}\\n          variant=\\\"secondary\\\"\\n        />\\n      )}\\n    </StateEvent>\\n  </div>\\n</Playground>\\n\")), mdx(\"p\", null, \"Primary and dander variants are should be used to focus used attention.\"), mdx(Playground, {\n    size: \"S\",\n    mdxType: \"Playground\"\n  }, mdx(\"div\", {\n    style: {\n      height: '150px'\n    }\n  }, mdx(StateEvent, {\n    initial: \"Cats\",\n    change: function change(event) {\n      var _event$target4;\n\n      return event === null || event === void 0 ? void 0 : (_event$target4 = event.target) === null || _event$target4 === void 0 ? void 0 : _event$target4.dataset.value;\n    },\n    mdxType: \"StateEvent\"\n  }, function (value, change) {\n    return mdx(\"div\", {\n      style: {\n        display: 'flex'\n      }\n    }, mdx(Select, {\n      icon: mdx(ArrowDown, {\n        mdxType: \"ArrowDown\"\n      }),\n      onChange: change,\n      options: [{\n        children: 'Cats',\n        value: 'Cats'\n      }, {\n        children: 'Dogs',\n        value: 'Dogs'\n      }, {\n        children: 'Birds',\n        value: 'Birds'\n      }],\n      selected: value,\n      variant: \"primary\",\n      mdxType: \"Select\"\n    }), mdx(\"div\", {\n      style: {\n        marginLeft: '10px'\n      }\n    }, mdx(Select, {\n      icon: mdx(ArrowDown, {\n        mdxType: \"ArrowDown\"\n      }),\n      onChange: function onChange() {},\n      options: [{\n        children: 'Toyota',\n        value: 'Toyota'\n      }, {\n        children: 'Opel',\n        value: 'Opel'\n      }, {\n        children: 'BMW',\n        value: 'BMW'\n      }],\n      selected: \"BMW\",\n      variant: \"danger\",\n      isDisabled: true,\n      mdxType: \"Select\"\n    })));\n  }))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Playground size=\\\"S\\\">\\n  <div style={{ height: '150px' }}>\\n    <StateEvent initial=\\\"Cats\\\" change={(event) => event?.target?.dataset.value}>\\n      {(value, change) => (\\n        <div style={{ display: 'flex' }}>\\n          <Select\\n            icon={<ArrowDown />}\\n            onChange={change}\\n            options={[\\n              { children: 'Cats', value: 'Cats' },\\n              { children: 'Dogs', value: 'Dogs' },\\n              { children: 'Birds', value: 'Birds' },\\n            ]}\\n            selected={value}\\n            variant=\\\"primary\\\"\\n          />\\n          <div style={{ marginLeft: '10px' }}>\\n            <Select\\n              icon={<ArrowDown />}\\n              onChange={() => {}}\\n              options={[\\n                { children: 'Toyota', value: 'Toyota' },\\n                { children: 'Opel', value: 'Opel' },\\n                { children: 'BMW', value: 'BMW' },\\n              ]}\\n              selected=\\\"BMW\\\"\\n              variant=\\\"danger\\\"\\n              isDisabled\\n            />\\n          </div>\\n        </div>\\n      )}\\n    </StateEvent>\\n  </div>\\n</Playground>\\n\")), mdx(\"h3\", null, \"Kinds\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Name\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"Select\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Base Select. Useful for creating a new kind of Select components\")))), mdx(\"h3\", null, \"Props\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Name\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Default\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"children\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"React.ReactNode\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"The content to show inside option. It can be string or string with an icon\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"value\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"The value of option. Passed to option as an attribute \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"data-value\"))))), mdx(\"h1\", null, \"Props\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Name\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Default\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"icon\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"React.ReactNode\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Component to show on the right side of select\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"isDisabled\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"HTML disabled attribute\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"onBlur\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"React.FocusEventHandler<HTMLElement>\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"On blur event handler.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"onChange\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"React.EventHandler<React.SyntheticEvent>\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"On change event handler.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"onFocus\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"React.FocusEventHandler<HTMLElement>\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"On focus event handler.\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"options\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"SelectOptionProps[]\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"An array of select options\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"placeholder\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"''\"), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Placeholder for select\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"selected\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"SelectOptionProps\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Selected option\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"variant\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"'default'\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Variant prop to style InputPassword component\")))));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"pageID":"b6f008bc-0257-5ce1-b207-c732ad50b5c4"}},"staticQueryHashes":["1158639554"]}