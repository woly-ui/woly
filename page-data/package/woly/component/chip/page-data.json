{"componentChunkName":"component---node-modules-gatsby-theme-woly-src-templates-usage-js","path":"/package/woly/component/chip","result":{"data":{"usage":{"frontmatter":{"name":"chip","package":"woly","category":"atoms"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"name\": \"chip\",\n  \"category\": \"atoms\",\n  \"package\": \"woly\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Chip\"), \" is used for categorizing or markup.\\nChips allow users to enter information, make selections, filter content, or trigger actions.\\nWhile buttons are expected to appear consistently and with familiar calls to action, chips should appear dynamically as a group of multiple interactive elements.\"), mdx(\"p\", null, \"Chips support content labeling for accessibility and are readable by most screen readers, such as TalkBack.\\nText rendered in chips is automatically provided to accessibility services. Additional content labels are usually unnecessary.\"), mdx(\"p\", null, \"When a chip can be removed a special cancel icon will appear at the far right to indicate this.\\nThe Remove Icon override provides the means to trigger this functionality.\"), mdx(\"p\", null, \"When using a Chip, the obround will automatically size itself to fit the content and you only need to adjust the size of the instance accordingly.\\nIf the Chip is used as an action trigger for related content avoid using it in scenarios where there is only one available action,\\nor for configurations presenting only one selectable option.\"), mdx(\"p\", null, \"As a standalone component, the most common use will be in some form of input, so some of the behaviour demonstrated here is not shown in context.\"), mdx(\"h3\", null, \"Example\"), mdx(Playground, {\n    mdxType: \"Playground\"\n  }, mdx(block.XS, null, mdx(Chip, {\n    variant: \"primary\",\n    mdxType: \"Chip\"\n  }, \"Simple Chip\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Playground>\\n  <block.XS>\\n    <Chip variant=\\\"primary\\\">Simple Chip</Chip>\\n  </block.XS>\\n</Playground>\\n\")), mdx(\"h3\", null, \"Clickable\"), mdx(\"p\", null, \"Chip can be a sipmple component or can be clickable component.\"), mdx(\"p\", null, \"In case when chip is clickable, it defined change appearance on focus, hover, and click.\"), mdx(\"p\", null, \"If chip consists another clickable component (eg button), this property defined will display a component which changes appearance on hover.\"), mdx(Playground, {\n    mdxType: \"Playground\"\n  }, mdx(block.N, null, mdx(Chip, {\n    variant: \"primary\",\n    onClick: function onClick() {\n      return console.info('click');\n    },\n    rightIcon: mdx(ButtonIcon, {\n      icon: mdx(IconClose, {\n        mdxType: \"IconClose\"\n      }),\n      onClick: function onClick() {\n        return console.info('IconClose clicked');\n      },\n      variant: \"primary\",\n      filled: true,\n      mdxType: \"ButtonIcon\"\n    }),\n    mdxType: \"Chip\"\n  }, \"Clicked Chip\")), mdx(block.XS, null, mdx(Chip, {\n    onClick: function onClick() {\n      return console.info('click');\n    },\n    variant: \"primary\",\n    rightIcon: mdx(ButtonIcon, {\n      icon: mdx(IconClose, {\n        mdxType: \"IconClose\"\n      }),\n      onClick: function onClick() {\n        return console.info('IconClose clicked');\n      },\n      variant: \"primary\",\n      filled: true,\n      mdxType: \"ButtonIcon\"\n    }),\n    mdxType: \"Chip\"\n  }, \"Clicked Icon\")), mdx(block.S, null, mdx(Chip, {\n    variant: \"primary\",\n    disabled: true,\n    rightIcon: mdx(ButtonIcon, {\n      icon: mdx(IconClose, {\n        mdxType: \"IconClose\"\n      }),\n      onClick: function onClick() {\n        return console.info('IconClose clicked');\n      },\n      variant: \"primary\",\n      filled: true,\n      disabled: true,\n      mdxType: \"ButtonIcon\"\n    }),\n    mdxType: \"Chip\"\n  }, \"Disabled Chip\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Playground>\\n  <block.N>\\n    <Chip\\n      variant=\\\"primary\\\"\\n      onClick={() => console.info('click')}\\n      rightIcon={\\n        <ButtonIcon\\n          icon={<IconClose />}\\n          onClick={() => console.info('IconClose clicked')}\\n          variant=\\\"primary\\\"\\n          filled\\n        />\\n      }\\n    >\\n      Clicked Chip\\n    </Chip>\\n  </block.N>\\n  <block.XS>\\n    <Chip\\n      onClick={() => console.info('click')}\\n      variant=\\\"primary\\\"\\n      rightIcon={\\n        <ButtonIcon\\n          icon={<IconClose />}\\n          onClick={() => console.info('IconClose clicked')}\\n          variant=\\\"primary\\\"\\n          filled\\n        />\\n      }\\n    >\\n      Clicked Icon\\n    </Chip>\\n  </block.XS>\\n  <block.S>\\n    <Chip\\n      variant=\\\"primary\\\"\\n      disabled\\n      rightIcon={\\n        <ButtonIcon\\n          icon={<IconClose />}\\n          onClick={() => console.info('IconClose clicked')}\\n          variant=\\\"primary\\\"\\n          filled\\n          disabled\\n        />\\n      }\\n    >\\n      Disabled Chip\\n    </Chip>\\n  </block.S>\\n</Playground>\\n\")), mdx(\"h3\", null, \"Icons/Buttons\"), mdx(\"p\", null, \"Chip can be used with icon on the left side or button on the right side.\"), mdx(\"p\", null, \"Even chip can be used with both options.\"), mdx(Playground, {\n    mdxType: \"Playground\"\n  }, mdx(block.S, null, mdx(Chip, {\n    variant: \"primary\",\n    leftIcon: mdx(IconPlus, {\n      mdxType: \"IconPlus\"\n    }),\n    mdxType: \"Chip\"\n  }, \"Chip with Icon\")), mdx(block.S, null, mdx(Chip, {\n    variant: \"primary\",\n    leftIcon: mdx(IconPlus, {\n      mdxType: \"IconPlus\"\n    }),\n    onClick: function onClick() {\n      return console.info('click');\n    },\n    mdxType: \"Chip\"\n  }, \"Clicked Chip\")), mdx(block.S, null, mdx(Chip, {\n    variant: \"primary\",\n    leftIcon: mdx(IconPlus, {\n      mdxType: \"IconPlus\"\n    }),\n    onClick: function onClick() {\n      return console.info('click');\n    },\n    rightIcon: mdx(ButtonIcon, {\n      icon: mdx(IconClose, {\n        mdxType: \"IconClose\"\n      }),\n      onClick: function onClick(event) {\n        return console.info('IconClose clicked');\n      },\n      variant: \"primary\",\n      filled: true,\n      mdxType: \"ButtonIcon\"\n    }),\n    mdxType: \"Chip\"\n  }, \"Clicked Icon\")), mdx(block.S, null, mdx(Chip, {\n    variant: \"primary\",\n    leftIcon: mdx(IconPlus, {\n      mdxType: \"IconPlus\"\n    }),\n    disabled: true,\n    rightIcon: mdx(ButtonIcon, {\n      icon: mdx(IconClose, {\n        mdxType: \"IconClose\"\n      }),\n      onClick: function onClick(event) {\n        return console.info('IconClose clicked');\n      },\n      variant: \"primary\",\n      filled: true,\n      disabled: true,\n      mdxType: \"ButtonIcon\"\n    }),\n    mdxType: \"Chip\"\n  }, \"Disabled Chip\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Playground>\\n  <block.S>\\n    <Chip variant=\\\"primary\\\" leftIcon={<IconPlus />}>\\n      Chip with Icon\\n    </Chip>\\n  </block.S>\\n  <block.S>\\n    <Chip variant=\\\"primary\\\" leftIcon={<IconPlus />} onClick={() => console.info('click')}>\\n      Clicked Chip\\n    </Chip>\\n  </block.S>\\n  <block.S>\\n    <Chip\\n      variant=\\\"primary\\\"\\n      leftIcon={<IconPlus />}\\n      onClick={() => console.info('click')}\\n      rightIcon={\\n        <ButtonIcon\\n          icon={<IconClose />}\\n          onClick={(event) => console.info('IconClose clicked')}\\n          variant=\\\"primary\\\"\\n          filled\\n        />\\n      }\\n    >\\n      Clicked Icon\\n    </Chip>\\n  </block.S>\\n  <block.S>\\n    <Chip\\n      variant=\\\"primary\\\"\\n      leftIcon={<IconPlus />}\\n      disabled\\n      rightIcon={\\n        <ButtonIcon\\n          icon={<IconClose />}\\n          onClick={(event) => console.info('IconClose clicked')}\\n          variant=\\\"primary\\\"\\n          filled\\n          disabled\\n        />\\n      }\\n    >\\n      Disabled Chip\\n    </Chip>\\n  </block.S>\\n</Playground>\\n\")), mdx(\"h3\", null, \"Props\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Name\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Default\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"children\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Text inside chip\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"disabled\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Attribute to disable chip\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"leftIcon\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"React.ReactNode\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"null\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Icon to show on the left side of the text\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"onClick\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"React.MouseEvent<HTMLDivElement>\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"null\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Callback when chip is clicked\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"rightIcon\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"React.ReactNode\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"null\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Icon to show on the right side of the text\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"variant\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"'secondary'\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Variant prop to style Chip component\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"...\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"HTMLButtonElement\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"{}\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Other props are inherited from \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"HTMLButtonElement\"))))));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"pageID":"f736d55c-df06-5d3b-8b29-70dd29d4132e"}},"staticQueryHashes":["1158639554"]}