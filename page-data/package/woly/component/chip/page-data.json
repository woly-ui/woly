{"componentChunkName":"component---node-modules-gatsby-theme-woly-src-templates-usage-js","path":"/package/woly/component/chip","result":{"data":{"usage":{"frontmatter":{"name":"chip","package":"woly","category":"atoms"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"name\": \"chip\",\n  \"category\": \"atoms\",\n  \"package\": \"woly\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Chip\"), \" is used for categorizing or markup.\\nChips allow users to enter information, make selections, filter content, or trigger actions.\\nWhile buttons are expected to appear consistently and with familiar calls to action,\\nchips should appear dynamically as a group of multiple interactive elements.\"), mdx(\"p\", null, \"Chips support content labeling for accessibility and are readable by most screen readers, such as TalkBack.\\nText rendered in chips is automatically provided to accessibility services.\\nAdditional content labels are usually unnecessary.\"), mdx(\"p\", null, \"When a chip can be removed a special cancel icon will appear at the far right to indicate this.\\nThe Remove Icon override provides the means to trigger this functionality.\"), mdx(\"p\", null, \"If the Chip is used as an action trigger for related content avoid using it in scenarios where there is only one available action,\\nor for configurations presenting only one selectable option.\"), mdx(\"p\", null, \"As a standalone component, the most common use will be in some form of input.\"), mdx(\"h3\", null, \"Example\"), mdx(\"h3\", null, \"Weight and priority\"), mdx(\"p\", null, \"Chip can be represented in primary, secondary, default or tertiary variants and can be styled with fill or outline.\\nIn case of choosing chip in tertiary variant with outline styles use the opposite background color to the text color of chip.\"), mdx(Playground, {\n    direction: \"horizontal\",\n    size: \"XS\",\n    mdxType: \"Playground\"\n  }, mdx(Chip, {\n    text: \"Simple Chip\",\n    variant: \"primary\",\n    mdxType: \"Chip\"\n  }), mdx(Chip, {\n    text: \"Simple Chip\",\n    variant: \"secondary\",\n    mdxType: \"Chip\"\n  }), mdx(Chip, {\n    text: \"Simple Chip\",\n    variant: \"default\",\n    mdxType: \"Chip\"\n  }), mdx(Chip, {\n    text: \"Simple Chip\",\n    variant: \"tertiary\",\n    mdxType: \"Chip\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Playground direction=\\\"horizontal\\\" size=\\\"XS\\\">\\n  <Chip text=\\\"Simple Chip\\\" variant=\\\"primary\\\" />\\n  <Chip text=\\\"Simple Chip\\\" variant=\\\"secondary\\\" />\\n  <Chip text=\\\"Simple Chip\\\" variant=\\\"default\\\" />\\n  <Chip text=\\\"Simple Chip\\\" variant=\\\"tertiary\\\" />\\n</Playground>\\n\")), mdx(Playground, {\n    direction: \"horizontal\",\n    size: \"XS\",\n    mdxType: \"Playground\"\n  }, mdx(Chip, {\n    outlined: true,\n    text: \"Simple Chip\",\n    variant: \"primary\",\n    mdxType: \"Chip\"\n  }), mdx(Chip, {\n    outlined: true,\n    text: \"Simple Chip\",\n    variant: \"secondary\",\n    mdxType: \"Chip\"\n  }), mdx(Chip, {\n    outlined: true,\n    text: \"Simple Chip\",\n    variant: \"default\",\n    mdxType: \"Chip\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Playground direction=\\\"horizontal\\\" size=\\\"XS\\\">\\n  <Chip outlined text=\\\"Simple Chip\\\" variant=\\\"primary\\\" />\\n  <Chip outlined text=\\\"Simple Chip\\\" variant=\\\"secondary\\\" />\\n  <Chip outlined text=\\\"Simple Chip\\\" variant=\\\"default\\\" />\\n</Playground>\\n\")), mdx(\"h3\", null, \"Clickable\"), mdx(\"p\", null, \"A chip can be either a simple visual component or an interactive element.\\nWhen chip is clickable, it can change its state to disabled, hover, active and can be focused.\\nIn this case chip`s view can be changed depending on the state in which he is now.\"), mdx(\"p\", null, \"Also, not only chip`s text can be interactive, the chip can include inside in own other interactive components,\\neg button-icon.\"), mdx(Playground, {\n    direction: \"horizontal\",\n    size: \"S\",\n    mdxType: \"Playground\"\n  }, mdx(Chip, {\n    onClick: function onClick() {\n      return console.info('click');\n    },\n    text: \"Click chip\",\n    variant: \"primary\",\n    mdxType: \"Chip\"\n  }), mdx(Chip, {\n    rightIcon: mdx(ButtonIcon, {\n      filled: true,\n      icon: mdx(IconClose, {\n        mdxType: \"IconClose\"\n      }),\n      onClick: function onClick() {\n        return console.info('IconClose clicked');\n      },\n      variant: \"primary\",\n      mdxType: \"ButtonIcon\"\n    }),\n    text: \"Click button\",\n    variant: \"primary\",\n    mdxType: \"Chip\"\n  }), mdx(Chip, {\n    onClick: function onClick() {\n      return console.info('click');\n    },\n    rightIcon: mdx(ButtonIcon, {\n      filled: true,\n      icon: mdx(IconClose, {\n        mdxType: \"IconClose\"\n      }),\n      onClick: function onClick() {\n        return console.info('IconClose clicked');\n      },\n      variant: \"primary\",\n      mdxType: \"ButtonIcon\"\n    }),\n    text: \"Clicked chip and button\",\n    variant: \"primary\",\n    mdxType: \"Chip\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Playground direction=\\\"horizontal\\\" size=\\\"S\\\">\\n  <Chip onClick={() => console.info('click')} text=\\\"Click chip\\\" variant=\\\"primary\\\" />\\n  <Chip\\n    rightIcon={\\n      <ButtonIcon\\n        filled\\n        icon={<IconClose />}\\n        onClick={() => console.info('IconClose clicked')}\\n        variant=\\\"primary\\\"\\n      />\\n    }\\n    text=\\\"Click button\\\"\\n    variant=\\\"primary\\\"\\n  />\\n  <Chip\\n    onClick={() => console.info('click')}\\n    rightIcon={\\n      <ButtonIcon\\n        filled\\n        icon={<IconClose />}\\n        onClick={() => console.info('IconClose clicked')}\\n        variant=\\\"primary\\\"\\n      />\\n    }\\n    text=\\\"Clicked chip and button\\\"\\n    variant=\\\"primary\\\"\\n  />\\n</Playground>\\n\")), mdx(Playground, {\n    direction: \"horizontal\",\n    size: \"S\",\n    mdxType: \"Playground\"\n  }, mdx(Chip, {\n    onClick: function onClick() {\n      return console.info('click');\n    },\n    outlined: true,\n    text: \"Click chip\",\n    variant: \"primary\",\n    mdxType: \"Chip\"\n  }), mdx(Chip, {\n    outlined: true,\n    rightIcon: mdx(ButtonIcon, {\n      icon: mdx(IconClose, {\n        mdxType: \"IconClose\"\n      }),\n      onClick: function onClick() {\n        return console.info('IconClose clicked');\n      },\n      variant: \"secondary\",\n      mdxType: \"ButtonIcon\"\n    }),\n    text: \"Click button\",\n    variant: \"secondary\",\n    mdxType: \"Chip\"\n  }), mdx(Chip, {\n    onClick: function onClick() {\n      return console.info('click');\n    },\n    outlined: true,\n    rightIcon: mdx(ButtonIcon, {\n      icon: mdx(IconClose, {\n        mdxType: \"IconClose\"\n      }),\n      onClick: function onClick() {\n        return console.info('IconClose clicked');\n      },\n      variant: \"default\",\n      mdxType: \"ButtonIcon\"\n    }),\n    text: \"Clicked chip and button\",\n    variant: \"default\",\n    mdxType: \"Chip\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Playground direction=\\\"horizontal\\\" size=\\\"S\\\">\\n  <Chip onClick={() => console.info('click')} outlined text=\\\"Click chip\\\" variant=\\\"primary\\\" />\\n  <Chip\\n    outlined\\n    rightIcon={\\n      <ButtonIcon\\n        icon={<IconClose />}\\n        onClick={() => console.info('IconClose clicked')}\\n        variant=\\\"secondary\\\"\\n      />\\n    }\\n    text=\\\"Click button\\\"\\n    variant=\\\"secondary\\\"\\n  />\\n  <Chip\\n    onClick={() => console.info('click')}\\n    outlined\\n    rightIcon={\\n      <ButtonIcon\\n        icon={<IconClose />}\\n        onClick={() => console.info('IconClose clicked')}\\n        variant=\\\"default\\\"\\n      />\\n    }\\n    text=\\\"Clicked chip and button\\\"\\n    variant=\\\"default\\\"\\n  />\\n</Playground>\\n\")), mdx(\"h3\", null, \"Disabled\"), mdx(\"p\", null, \"If chip is an interactive component it can be disabled. In case when chip contains an interactive component don`t\\npass the disable state only to it, make the entire component disable.\"), mdx(Playground, {\n    mdxType: \"Playground\"\n  }, mdx(Chip, {\n    disabled: true,\n    rightIcon: mdx(ButtonIcon, {\n      disabled: true,\n      icon: mdx(IconClose, {\n        mdxType: \"IconClose\"\n      }),\n      onClick: function onClick() {\n        return console.info('IconClose clicked');\n      },\n      variant: \"primary\",\n      mdxType: \"ButtonIcon\"\n    }),\n    text: \"Disabled chip button\",\n    variant: \"primary\",\n    mdxType: \"Chip\"\n  }), mdx(Chip, {\n    disabled: true,\n    rightIcon: mdx(ButtonIcon, {\n      disabled: true,\n      filled: true,\n      icon: mdx(IconClose, {\n        mdxType: \"IconClose\"\n      }),\n      onClick: function onClick() {\n        return console.info('IconClose clicked');\n      },\n      variant: \"primary\",\n      mdxType: \"ButtonIcon\"\n    }),\n    text: \"Disabled chip button\",\n    variant: \"default\",\n    mdxType: \"Chip\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Playground>\\n  <Chip\\n    disabled\\n    rightIcon={\\n      <ButtonIcon\\n        disabled\\n        icon={<IconClose />}\\n        onClick={() => console.info('IconClose clicked')}\\n        variant=\\\"primary\\\"\\n      />\\n    }\\n    text=\\\"Disabled chip button\\\"\\n    variant=\\\"primary\\\"\\n  />\\n  <Chip\\n    disabled\\n    rightIcon={\\n      <ButtonIcon\\n        disabled\\n        filled\\n        icon={<IconClose />}\\n        onClick={() => console.info('IconClose clicked')}\\n        variant=\\\"primary\\\"\\n      />\\n    }\\n    text=\\\"Disabled chip button\\\"\\n    variant=\\\"default\\\"\\n  />\\n</Playground>\\n\")), mdx(\"h3\", null, \"Icons/Buttons\"), mdx(\"p\", null, \"\\u041Eptional the \\u0441hip contains an icon on the left side as usually or on the right side in rarely cases.\\nAslo, chip can contain some other interactive component such like a button. As usual it represents on the right side of chip.\"), mdx(Playground, {\n    direction: \"horizontal\",\n    size: \"S\",\n    mdxType: \"Playground\"\n  }, mdx(Chip, {\n    leftIcon: mdx(IconPlus, {\n      mdxType: \"IconPlus\"\n    }),\n    text: \"Chip with icon\",\n    variant: \"primary\",\n    mdxType: \"Chip\"\n  }), mdx(Chip, {\n    leftIcon: mdx(IconPlus, {\n      mdxType: \"IconPlus\"\n    }),\n    onClick: function onClick() {\n      return console.info('click');\n    },\n    text: \"Clicked Chip & icon\",\n    variant: \"primary\",\n    mdxType: \"Chip\"\n  }), mdx(Chip, {\n    leftIcon: mdx(IconPlus, {\n      mdxType: \"IconPlus\"\n    }),\n    onClick: function onClick() {\n      return console.info('click');\n    },\n    rightIcon: mdx(ButtonIcon, {\n      filled: true,\n      icon: mdx(IconClose, {\n        mdxType: \"IconClose\"\n      }),\n      onClick: function onClick(event) {\n        return console.info('IconClose clicked');\n      },\n      variant: \"primary\",\n      mdxType: \"ButtonIcon\"\n    }),\n    text: \"Chip with icon\",\n    variant: \"primary\",\n    mdxType: \"Chip\"\n  }), mdx(Chip, {\n    disabled: true,\n    leftIcon: mdx(IconPlus, {\n      mdxType: \"IconPlus\"\n    }),\n    rightIcon: mdx(ButtonIcon, {\n      disabled: true,\n      icon: mdx(IconClose, {\n        mdxType: \"IconClose\"\n      }),\n      onClick: function onClick(event) {\n        return console.info('IconClose clicked');\n      },\n      variant: \"primary\",\n      mdxType: \"ButtonIcon\"\n    }),\n    text: \"Chip with icon\",\n    variant: \"primary\",\n    mdxType: \"Chip\"\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Playground direction=\\\"horizontal\\\" size=\\\"S\\\">\\n  <Chip leftIcon={<IconPlus />} text=\\\"Chip with icon\\\" variant=\\\"primary\\\" />\\n  <Chip\\n    leftIcon={<IconPlus />}\\n    onClick={() => console.info('click')}\\n    text=\\\"Clicked Chip & icon\\\"\\n    variant=\\\"primary\\\"\\n  />\\n  <Chip\\n    leftIcon={<IconPlus />}\\n    onClick={() => console.info('click')}\\n    rightIcon={\\n      <ButtonIcon\\n        filled\\n        icon={<IconClose />}\\n        onClick={(event) => console.info('IconClose clicked')}\\n        variant=\\\"primary\\\"\\n      />\\n    }\\n    text=\\\"Chip with icon\\\"\\n    variant=\\\"primary\\\"\\n  />\\n  <Chip\\n    disabled\\n    leftIcon={<IconPlus />}\\n    rightIcon={\\n      <ButtonIcon\\n        disabled\\n        icon={<IconClose />}\\n        onClick={(event) => console.info('IconClose clicked')}\\n        variant=\\\"primary\\\"\\n      />\\n    }\\n    text=\\\"Chip with icon\\\"\\n    variant=\\\"primary\\\"\\n  />\\n</Playground>\\n\")), mdx(\"h3\", null, \"Size\"), mdx(\"p\", null, \"Mostly use three chip sizes: none, extra small and small.\\nSmall chips can be used as standalone components, chips of other sizes are used as part of complex components.\"), mdx(Playground, {\n    mdxType: \"Playground\"\n  }, mdx(block.N, null, mdx(Chip, {\n    leftIcon: mdx(IconPlus, {\n      mdxType: \"IconPlus\"\n    }),\n    onClick: function onClick() {\n      return console.info('click');\n    },\n    rightIcon: mdx(ButtonIcon, {\n      filled: true,\n      icon: mdx(IconClose, {\n        mdxType: \"IconClose\"\n      }),\n      onClick: function onClick(event) {\n        return console.info('IconClose clicked');\n      },\n      variant: \"primary\",\n      mdxType: \"ButtonIcon\"\n    }),\n    text: \"Chip with icon\",\n    variant: \"primary\",\n    mdxType: \"Chip\"\n  })), mdx(block.XS, null, mdx(Chip, {\n    leftIcon: mdx(IconPlus, {\n      mdxType: \"IconPlus\"\n    }),\n    onClick: function onClick() {\n      return console.info('click');\n    },\n    rightIcon: mdx(ButtonIcon, {\n      filled: true,\n      icon: mdx(IconClose, {\n        mdxType: \"IconClose\"\n      }),\n      onClick: function onClick(event) {\n        return console.info('IconClose clicked');\n      },\n      variant: \"primary\",\n      mdxType: \"ButtonIcon\"\n    }),\n    text: \"Chip with icon\",\n    variant: \"primary\",\n    mdxType: \"Chip\"\n  })), mdx(block.S, null, mdx(Chip, {\n    leftIcon: mdx(IconPlus, {\n      mdxType: \"IconPlus\"\n    }),\n    onClick: function onClick() {\n      return console.info('click');\n    },\n    rightIcon: mdx(ButtonIcon, {\n      filled: true,\n      icon: mdx(IconClose, {\n        mdxType: \"IconClose\"\n      }),\n      onClick: function onClick(event) {\n        return console.info('IconClose clicked');\n      },\n      variant: \"primary\",\n      mdxType: \"ButtonIcon\"\n    }),\n    text: \"Chip with icon\",\n    variant: \"primary\",\n    mdxType: \"Chip\"\n  }))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Playground>\\n  <block.N>\\n    <Chip\\n      leftIcon={<IconPlus />}\\n      onClick={() => console.info('click')}\\n      rightIcon={\\n        <ButtonIcon\\n          filled\\n          icon={<IconClose />}\\n          onClick={(event) => console.info('IconClose clicked')}\\n          variant=\\\"primary\\\"\\n        />\\n      }\\n      text=\\\"Chip with icon\\\"\\n      variant=\\\"primary\\\"\\n    />\\n  </block.N>\\n  <block.XS>\\n    <Chip\\n      leftIcon={<IconPlus />}\\n      onClick={() => console.info('click')}\\n      rightIcon={\\n        <ButtonIcon\\n          filled\\n          icon={<IconClose />}\\n          onClick={(event) => console.info('IconClose clicked')}\\n          variant=\\\"primary\\\"\\n        />\\n      }\\n      text=\\\"Chip with icon\\\"\\n      variant=\\\"primary\\\"\\n    />\\n  </block.XS>\\n  <block.S>\\n    <Chip\\n      leftIcon={<IconPlus />}\\n      onClick={() => console.info('click')}\\n      rightIcon={\\n        <ButtonIcon\\n          filled\\n          icon={<IconClose />}\\n          onClick={(event) => console.info('IconClose clicked')}\\n          variant=\\\"primary\\\"\\n        />\\n      }\\n      text=\\\"Chip with icon\\\"\\n      variant=\\\"primary\\\"\\n    />\\n  </block.S>\\n</Playground>\\n\")), mdx(\"h3\", null, \"Props\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Name\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Default\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"disabled\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"false\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Attribute to disable chip\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"leftIcon\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"React.ReactNode\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"null\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Component to show on the left side of the text (ex.: icon)\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"onClick\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"React.MouseEvent<HTMLDivElement>\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"null\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Callback when chip is clicked\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"outlined\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"false\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Change chip`s view from filled to outlined\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"rightIcon\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"React.ReactNode\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"null\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Component to show on the right side of the text (ex.: icon, icon-button)\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"text\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Text inside chip\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"variant\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"'secondary'\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Variant prop to style Chip component\")))));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"pageID":"f736d55c-df06-5d3b-8b29-70dd29d4132e"}},"staticQueryHashes":["1158639554"]}