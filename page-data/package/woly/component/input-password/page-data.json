{"componentChunkName":"component---node-modules-gatsby-theme-woly-src-templates-usage-js","path":"/package/woly/component/input-password","result":{"data":{"usage":{"frontmatter":{"name":"input-password","package":"woly","category":"molecules"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"name\": \"input-password\",\n  \"category\": \"molecules\",\n  \"package\": \"woly\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var _mdx;\n\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"InputPassword\"), \" provide a way for the user to securely enter a password\\nThe component icludes a button-icon that toggle to hide and show the\\npassword as well as a meter to show the current strength of the password.\"), mdx(\"p\", null, \"InputPassword can be used in an authorization form or to confirm user action.\"), mdx(\"h3\", null, \"Example\"), mdx(Playground, {\n    mdxType: \"Playground\"\n  }, mdx(State, {\n    initial: false,\n    change: function change(i) {\n      return !i;\n    },\n    mdxType: \"State\"\n  }, function (value, change) {\n    return mdx(InputPassword, {\n      onClick: change,\n      name: \"name\",\n      placeholder: \"Enter password\",\n      onChange: function onChange(event) {\n        return console.info('On input change');\n      },\n      variant: \"primary\",\n      mdxType: \"InputPassword\"\n    });\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Playground>\\n <State initial={false} change={(i) => !i}>\\n    {(value, change) => (\\n      <InputPassword\\n        onClick={change}\\n        name=\\\"name\\\"\\n        placeholder=\\\"Enter password\\\"\\n        onChange={(event) => console.info('On input change')}\\n        variant=\\\"primary\\\"\\n      />\\n    )}\\n  </State>\\n</Playground>\\n\")), mdx(\"h3\", null, \"Disabled\"), mdx(\"p\", null, \"Disabled text fields are uneditable. They have less opacity so that they appear less tappable.\"), mdx(Playground, {\n    mdxType: \"Playground\"\n  }, mdx(InputPassword, (_mdx = {\n    disabled: true,\n    onClick: function onClick(event) {\n      return console.info('OnClick');\n    },\n    variant: \"primary\",\n    name: \"name\",\n    placeholder: \"Enter password\"\n  }, _defineProperty(_mdx, \"variant\", \"primary\"), _defineProperty(_mdx, \"mdxType\", \"InputPassword\"), _mdx))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Playground>\\n  <InputPassword\\n    disabled\\n    onClick={(event) => console.info('OnClick')}\\n    variant=\\\"primary\\\"\\n    name=\\\"name\\\"\\n    placeholder=\\\"Enter password\\\"\\n    variant=\\\"primary\\\"\\n  />\\n</Playground>\\n\")), mdx(\"h3\", null, \"Variants\"), mdx(\"p\", null, \"Primary and secondary variants are should be used to focus user attention.\"), mdx(Playground, {\n    direction: \"vertical\",\n    mdxType: \"Playground\"\n  }, mdx(State, {\n    initial: false,\n    change: function change(i) {\n      return !i;\n    },\n    mdxType: \"State\"\n  }, function (value, change) {\n    return mdx(InputPassword, {\n      onClick: change,\n      name: \"name\",\n      placeholder: \"Enter password\",\n      onChange: function onChange(event) {\n        return console.info('On input change');\n      },\n      variant: \"primary\",\n      mdxType: \"InputPassword\"\n    });\n  }), mdx(State, {\n    initial: false,\n    change: function change(i) {\n      return !i;\n    },\n    mdxType: \"State\"\n  }, function (value, change) {\n    return mdx(InputPassword, {\n      onClick: change,\n      name: \"name\",\n      placeholder: \"Enter password\",\n      onChange: function onChange(event) {\n        return console.info('On input change');\n      },\n      variant: \"secondary\",\n      mdxType: \"InputPassword\"\n    });\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Playground direction=\\\"vertical\\\">\\n  <State initial={false} change={(i) => !i}>\\n    {(value, change) => (\\n      <InputPassword\\n        onClick={change}\\n        name=\\\"name\\\"\\n        placeholder=\\\"Enter password\\\"\\n        onChange={(event) => console.info('On input change')}\\n        variant=\\\"primary\\\"\\n      />\\n    )}\\n  </State>\\n  <State initial={false} change={(i) => !i}>\\n    {(value, change) => (\\n      <InputPassword\\n        onClick={change}\\n        name=\\\"name\\\"\\n        placeholder=\\\"Enter password\\\"\\n        onChange={(event) => console.info('On input change')}\\n        variant=\\\"secondary\\\"\\n      />\\n    )}\\n  </State>\\n</Playground>\\n\")), mdx(\"p\", null, \"Error variant can be used to focus user attention on error.\"), mdx(Playground, {\n    direction: \"vertical\",\n    mdxType: \"Playground\"\n  }, mdx(State, {\n    initial: false,\n    change: function change(i) {\n      return !i;\n    },\n    mdxType: \"State\"\n  }, function (value, change) {\n    return mdx(InputPassword, {\n      onClick: change,\n      name: \"name\",\n      placeholder: \"Enter password\",\n      onChange: function onChange(event) {\n        return console.info('On input change');\n      },\n      variant: \"danger\",\n      mdxType: \"InputPassword\"\n    });\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Playground direction=\\\"vertical\\\">\\n  <State initial={false} change={(i) => !i}>\\n    {(value, change) => (\\n      <InputPassword\\n        onClick={change}\\n        name=\\\"name\\\"\\n        placeholder=\\\"Enter password\\\"\\n        onChange={(event) => console.info('On input change')}\\n        variant=\\\"danger\\\"\\n      />\\n    )}\\n  </State>\\n</Playground>\\n\")), mdx(\"h3\", null, \"Sizes\"), mdx(\"p\", null, \"Size controlled by the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"component-level\"), \" block property not from the props.\"), mdx(Playground, {\n    direction: \"vertical\",\n    mdxType: \"Playground\"\n  }, mdx(block.S, null, mdx(State, {\n    initial: false,\n    change: function change(i) {\n      return !i;\n    },\n    mdxType: \"State\"\n  }, function (value, change) {\n    var _mdx2;\n\n    return mdx(InputPassword, (_mdx2 = {\n      onClick: change,\n      variant: \"primary\",\n      name: \"name\",\n      placeholder: \"Enter password\",\n      onChange: function onChange(event) {\n        return console.info('On input change');\n      }\n    }, _defineProperty(_mdx2, \"variant\", \"primary\"), _defineProperty(_mdx2, \"mdxType\", \"InputPassword\"), _mdx2));\n  })), mdx(block.M, null, mdx(State, {\n    initial: false,\n    change: function change(i) {\n      return !i;\n    },\n    mdxType: \"State\"\n  }, function (value, change) {\n    var _mdx3;\n\n    return mdx(InputPassword, (_mdx3 = {\n      onClick: change,\n      variant: \"primary\",\n      name: \"name\",\n      placeholder: \"Enter password\",\n      onChange: function onChange(event) {\n        return console.info('On input change');\n      }\n    }, _defineProperty(_mdx3, \"variant\", \"primary\"), _defineProperty(_mdx3, \"mdxType\", \"InputPassword\"), _mdx3));\n  })), mdx(block.L, null, mdx(State, {\n    initial: false,\n    change: function change(i) {\n      return !i;\n    },\n    mdxType: \"State\"\n  }, function (value, change) {\n    var _mdx4;\n\n    return mdx(InputPassword, (_mdx4 = {\n      onClick: change,\n      variant: \"primary\",\n      name: \"name\",\n      placeholder: \"Enter password\",\n      onChange: function onChange(event) {\n        return console.info('On input change');\n      }\n    }, _defineProperty(_mdx4, \"variant\", \"primary\"), _defineProperty(_mdx4, \"mdxType\", \"InputPassword\"), _mdx4));\n  })), mdx(block.XL, null, mdx(State, {\n    initial: false,\n    change: function change(i) {\n      return !i;\n    },\n    mdxType: \"State\"\n  }, function (value, change) {\n    var _mdx5;\n\n    return mdx(InputPassword, (_mdx5 = {\n      onClick: change,\n      variant: \"primary\",\n      name: \"name\",\n      placeholder: \"Enter password\",\n      onChange: function onChange(event) {\n        return console.info('On input change');\n      }\n    }, _defineProperty(_mdx5, \"variant\", \"primary\"), _defineProperty(_mdx5, \"mdxType\", \"InputPassword\"), _mdx5));\n  })), mdx(block.H, null, mdx(State, {\n    initial: false,\n    change: function change(i) {\n      return !i;\n    },\n    mdxType: \"State\"\n  }, function (value, change) {\n    var _mdx6;\n\n    return mdx(InputPassword, (_mdx6 = {\n      onClick: change,\n      variant: \"primary\",\n      name: \"name\",\n      placeholder: \"Enter password\",\n      onChange: function onChange(event) {\n        return console.info('On input change');\n      }\n    }, _defineProperty(_mdx6, \"variant\", \"primary\"), _defineProperty(_mdx6, \"mdxType\", \"InputPassword\"), _mdx6));\n  }))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Playground direction=\\\"vertical\\\">\\n  <block.S>\\n    <State initial={false} change={(i) => !i}>\\n    {(value, change) => (\\n      <InputPassword\\n        onClick={change}\\n        variant=\\\"primary\\\"\\n        name=\\\"name\\\"\\n        placeholder=\\\"Enter password\\\"\\n        onChange={(event) => console.info('On input change')}\\n        variant=\\\"primary\\\"\\n      />\\n    )}\\n  </State>\\n  </block.S>\\n  <block.M>\\n    <State initial={false} change={(i) => !i}>\\n    {(value, change) => (\\n      <InputPassword\\n        onClick={change}\\n        variant=\\\"primary\\\"\\n        name=\\\"name\\\"\\n        placeholder=\\\"Enter password\\\"\\n        onChange={(event) => console.info('On input change')}\\n        variant=\\\"primary\\\"\\n      />\\n    )}\\n  </State>\\n  </block.M>\\n  <block.L>\\n    <State initial={false} change={(i) => !i}>\\n    {(value, change) => (\\n      <InputPassword\\n        onClick={change}\\n        variant=\\\"primary\\\"\\n        name=\\\"name\\\"\\n        placeholder=\\\"Enter password\\\"\\n        onChange={(event) => console.info('On input change')}\\n        variant=\\\"primary\\\"\\n      />\\n    )}\\n  </State>\\n  </block.L>\\n  <block.XL>\\n    <State initial={false} change={(i) => !i}>\\n    {(value, change) => (\\n      <InputPassword\\n        onClick={change}\\n        variant=\\\"primary\\\"\\n        name=\\\"name\\\"\\n        placeholder=\\\"Enter password\\\"\\n        onChange={(event) => console.info('On input change')}\\n        variant=\\\"primary\\\"\\n      />\\n    )}\\n  </State>\\n  </block.XL>\\n  <block.H>\\n    <State initial={false} change={(i) => !i}>\\n    {(value, change) => (\\n      <InputPassword\\n        onClick={change}\\n        variant=\\\"primary\\\"\\n        name=\\\"name\\\"\\n        placeholder=\\\"Enter password\\\"\\n        onChange={(event) => console.info('On input change')}\\n        variant=\\\"primary\\\"\\n      />\\n    )}\\n  </State>\\n  </block.H>\\n</Playground>\\n\")), mdx(\"h3\", null, \"Container\"), mdx(\"p\", null, \"Inputs can be placed inside the container. Input width is equal to container size.\"), mdx(Playground, {\n    direction: \"vertical\",\n    mdxType: \"Playground\"\n  }, mdx(block.L, null, mdx(State, {\n    initial: false,\n    change: function change(i) {\n      return !i;\n    },\n    mdxType: \"State\"\n  }, function (value, change) {\n    var _mdx7;\n\n    return mdx(InputPassword, (_mdx7 = {\n      onClick: change,\n      variant: \"primary\",\n      name: \"name\",\n      placeholder: \"Enter password\",\n      onChange: function onChange(event) {\n        return console.info('On input change');\n      }\n    }, _defineProperty(_mdx7, \"variant\", \"primary\"), _defineProperty(_mdx7, \"mdxType\", \"InputPassword\"), _mdx7));\n  }))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Playground direction=\\\"vertical\\\">\\n  <block.L>\\n    <State initial={false} change={(i) => !i}>\\n    {(value, change) => (\\n      <InputPassword\\n        onClick={change}\\n        variant=\\\"primary\\\"\\n        name=\\\"name\\\"\\n        placeholder=\\\"Enter password\\\"\\n        onChange={(event) => console.info('On input change')}\\n        variant=\\\"primary\\\"\\n      />\\n    )}\\n  </State>\\n  </block.L>\\n</Playground>\\n\")), mdx(\"h3\", null, \"Kinds\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Name\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"InputPassword\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Base inputPassword. Useful for creating a new kind of inputPassword\")))), mdx(\"h3\", null, \"Props\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Name\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Default\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"disabled\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"null\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"HTML disabled attribute\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"name\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"HTML name attribute\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"onChange\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"React.ChangeEventHandler<HTMLInputElement>\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Callback when input is changed\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"value\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"HTMLInputElement['value']\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"null\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"HTML value attribute\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"variant\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"'default'\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Variant prop to style InputPassword component\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"placeholder\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"CSS pseudo-element represents the placeholder text\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"rightIcon\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"React.ReactNode\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Component to show on the right side of the text (ex.: Icon)\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"...\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"HTMLInputElement\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"{}\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Other props are inherited from \", mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"HTMLInputElement\"))))));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"pageID":"ceff6ab9-ef72-5201-872e-55f934adef6e"}},"staticQueryHashes":["1158639554"]}