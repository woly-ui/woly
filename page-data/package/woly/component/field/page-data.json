{"componentChunkName":"component---node-modules-gatsby-theme-woly-src-templates-usage-js","path":"/package/woly/component/field","result":{"data":{"usage":{"frontmatter":{"name":"field","package":"woly","category":"molecules"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"name\": \"field\",\n  \"category\": \"molecules\",\n  \"package\": \"woly\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Field\"), \" is a master component that will make it easy to modify the label based on the field settings\\nIt\\u2019s common for fields to have different settings that are usually displayed in the label.\"), mdx(\"h3\", null, \"Label\"), mdx(\"p\", null, \"Field labels display the type of input a field requires.\\nEvery field component should have a label.\"), mdx(\"p\", null, \"Labels are aligned with the input line and always visible.\\nThey can be resting (when a field is inactive and empty) or floating.\"), mdx(\"p\", null, \"Input line\\nThe input line indicates where to enter text, displayed below the label.\"), mdx(\"h3\", null, \"Example\"), mdx(Playground, {\n    mdxType: \"Playground\"\n  }, mdx(Field, {\n    label: \"Label\",\n    mdxType: \"Field\"\n  }, mdx(Input, {\n    variant: \"primary\",\n    name: \"name\",\n    onChange: function onChange(event) {\n      return console.info('On input change');\n    },\n    placeholder: \"Placeholder\",\n    type: \"text\",\n    mdxType: \"Input\"\n  }))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Playground>\\n  <Field label=\\\"Label\\\">\\n    <Input\\n      variant=\\\"primary\\\"\\n      name=\\\"name\\\"\\n      onChange={(event) => console.info('On input change')}\\n      placeholder=\\\"Placeholder\\\"\\n      type=\\\"text\\\"\\n    />\\n  </Field>\\n</Playground>\\n\")), mdx(\"h3\", null, \"Labels\"), mdx(\"p\", null, \"Labels can be used in case for a standalone component, in common it will be eg input, toggle, textarea\"), mdx(\"p\", null, \"or also as a label of group of component, eg checkbox or radiobutton groups.\"), mdx(Playground, {\n    size: \"S\",\n    mdxType: \"Playground\"\n  }, mdx(Field, {\n    label: \"Label of group\",\n    mdxType: \"Field\"\n  }, mdx(Checkbox, {\n    text: \"Item text\",\n    variant: \"secondary\",\n    mdxType: \"Checkbox\"\n  }), mdx(Checkbox, {\n    text: \"Item text\",\n    variant: \"secondary\",\n    mdxType: \"Checkbox\"\n  }), mdx(Checkbox, {\n    text: \"Item text\",\n    variant: \"secondary\",\n    mdxType: \"Checkbox\"\n  })), mdx(Field, {\n    label: \"Label for a standalone component\",\n    variant: \"primary\",\n    mdxType: \"Field\"\n  }, mdx(TextArea, {\n    name: \"name\",\n    placeholder: \"TextArea\",\n    onChange: function onChange() {\n      return console.info('On textarea change');\n    },\n    variant: \"primary\",\n    overflow: \"hidden\",\n    isDisabled: true,\n    mdxType: \"TextArea\"\n  })), mdx(Field, {\n    label: \"Label for input\",\n    mdxType: \"Field\"\n  }, mdx(InputPassword, {\n    iconHidden: mdx(IconEyeClosed, {\n      mdxType: \"IconEyeClosed\"\n    }),\n    iconOpen: mdx(IconEyeOpened, {\n      mdxType: \"IconEyeOpened\"\n    }),\n    name: \"input\",\n    onChange: function onChange() {\n      return console.info('change');\n    },\n    placeholder: \"Enter password\",\n    variant: \"primary\",\n    mdxType: \"InputPassword\"\n  }))), ' ', mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Playground size=\\\"S\\\">\\n  <Field label=\\\"Label of group\\\">\\n    <Checkbox text=\\\"Item text\\\" variant=\\\"secondary\\\" />\\n    <Checkbox text=\\\"Item text\\\" variant=\\\"secondary\\\" />\\n    <Checkbox text=\\\"Item text\\\" variant=\\\"secondary\\\" />\\n  </Field>\\n  <Field label=\\\"Label for a standalone component\\\" variant=\\\"primary\\\">\\n    <TextArea\\n      name=\\\"name\\\"\\n      placeholder=\\\"TextArea\\\"\\n      onChange={() => console.info('On textarea change')}\\n      variant=\\\"primary\\\"\\n      overflow=\\\"hidden\\\"\\n      isDisabled\\n    />\\n  </Field>\\n  <Field label=\\\"Label for input\\\">\\n    <InputPassword\\n      iconHidden={<IconEyeClosed />}\\n      iconOpen={<IconEyeOpened />}\\n      name=\\\"input\\\"\\n      onChange={() => console.info('change')}\\n      placeholder=\\\"Enter password\\\"\\n      variant=\\\"primary\\\"\\n    />\\n  </Field>\\n</Playground>{' '}\\n\")), mdx(\"p\", null, \"Labels and children component can be replaced in row\"), mdx(Playground, {\n    size: \"S\",\n    mdxType: \"Playground\"\n  }, mdx(Field, {\n    label: \"Label of set\",\n    row: true,\n    mdxType: \"Field\"\n  }, mdx(Checkbox, {\n    text: \"Item text\",\n    variant: \"secondary\",\n    mdxType: \"Checkbox\"\n  }), mdx(Checkbox, {\n    text: \"Item text\",\n    variant: \"secondary\",\n    mdxType: \"Checkbox\"\n  }), mdx(Checkbox, {\n    text: \"Item text\",\n    variant: \"secondary\",\n    mdxType: \"Checkbox\"\n  })), mdx(State, {\n    initial: false,\n    change: function change(i) {\n      return !i;\n    },\n    mdxType: \"State\"\n  }, function (value, change) {\n    return mdx(Field, {\n      label: \"Label of item\",\n      row: true,\n      mdxType: \"Field\"\n    }, mdx(Switch, {\n      isChecked: value,\n      onChange: change,\n      id: \"roundTwo\",\n      variant: \"primary\",\n      mdxType: \"Switch\"\n    }));\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Playground size=\\\"S\\\">\\n  <Field label=\\\"Label of set\\\" row>\\n    <Checkbox text=\\\"Item text\\\" variant=\\\"secondary\\\" />\\n    <Checkbox text=\\\"Item text\\\" variant=\\\"secondary\\\" />\\n    <Checkbox text=\\\"Item text\\\" variant=\\\"secondary\\\" />\\n  </Field>\\n  <State initial={false} change={(i) => !i}>\\n    {(value, change) => (\\n      <Field label=\\\"Label of item\\\" row>\\n        <Switch isChecked={value} onChange={change} id=\\\"roundTwo\\\" variant=\\\"primary\\\" />\\n      </Field>\\n    )}\\n  </State>\\n</Playground>\\n\")), mdx(\"p\", null, \"or in column variants\"), mdx(Playground, {\n    size: \"S\",\n    mdxType: \"Playground\"\n  }, mdx(Field, {\n    label: \"Label of set\",\n    mdxType: \"Field\"\n  }, mdx(Checkbox, {\n    text: \"Item text\",\n    variant: \"secondary\",\n    mdxType: \"Checkbox\"\n  }), mdx(Checkbox, {\n    text: \"Item text\",\n    variant: \"secondary\",\n    mdxType: \"Checkbox\"\n  }), mdx(Checkbox, {\n    text: \"Item text\",\n    variant: \"secondary\",\n    mdxType: \"Checkbox\"\n  })), mdx(State, {\n    initial: false,\n    change: function change(i) {\n      return !i;\n    },\n    mdxType: \"State\"\n  }, function (value, change) {\n    return mdx(Field, {\n      label: \"Label of item\",\n      mdxType: \"Field\"\n    }, mdx(Switch, {\n      isChecked: value,\n      onChange: change,\n      id: \"roundOne\",\n      variant: \"primary\",\n      mdxType: \"Switch\"\n    }));\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Playground size=\\\"S\\\">\\n  <Field label=\\\"Label of set\\\">\\n    <Checkbox text=\\\"Item text\\\" variant=\\\"secondary\\\" />\\n    <Checkbox text=\\\"Item text\\\" variant=\\\"secondary\\\" />\\n    <Checkbox text=\\\"Item text\\\" variant=\\\"secondary\\\" />\\n  </Field>\\n  <State initial={false} change={(i) => !i}>\\n    {(value, change) => (\\n      <Field label=\\\"Label of item\\\">\\n        <Switch isChecked={value} onChange={change} id=\\\"roundOne\\\" variant=\\\"primary\\\" />\\n      </Field>\\n    )}\\n  </State>\\n</Playground>\\n\")), mdx(\"h3\", null, \"Variants\"), mdx(\"p\", null, \"Error variant can be used to focus user attention on error.\"), mdx(Playground, {\n    direction: \"vertical\",\n    mdxType: \"Playground\"\n  }, mdx(Field, {\n    label: \"Textarea with error\",\n    variant: \"danger\",\n    mdxType: \"Field\"\n  }, mdx(TextArea, {\n    name: \"name\",\n    placeholder: \"TextArea\",\n    onChange: function onChange() {\n      return console.info('On textarea change');\n    },\n    variant: \"danger\",\n    overflow: \"hidden\",\n    isDisabled: true,\n    mdxType: \"TextArea\"\n  })), mdx(Field, {\n    label: \"Input with error\",\n    variant: \"danger\",\n    mdxType: \"Field\"\n  }, mdx(Input, {\n    variant: \"danger\",\n    name: \"name\",\n    onChange: function onChange(event) {\n      return console.info('On input change');\n    },\n    placeholder: \"Placeholder\",\n    type: \"text\",\n    mdxType: \"Input\"\n  })), mdx(State, {\n    initial: false,\n    change: function change(i) {\n      return !i;\n    },\n    mdxType: \"State\"\n  }, function (value, change) {\n    return mdx(Field, {\n      label: \"Switch with error\",\n      mdxType: \"Field\"\n    }, mdx(Switch, {\n      isChecked: value,\n      onChange: change,\n      id: \"roundOne\",\n      variant: \"danger\",\n      mdxType: \"Switch\"\n    }));\n  })), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx\"\n  }, \"<Playground direction=\\\"vertical\\\">\\n  <Field label=\\\"Textarea with error\\\" variant=\\\"danger\\\">\\n    <TextArea\\n      name=\\\"name\\\"\\n      placeholder=\\\"TextArea\\\"\\n      onChange={() => console.info('On textarea change')}\\n      variant=\\\"danger\\\"\\n      overflow=\\\"hidden\\\"\\n      isDisabled\\n    />\\n  </Field>\\n  <Field label=\\\"Input with error\\\" variant=\\\"danger\\\">\\n    <Input\\n      variant=\\\"danger\\\"\\n      name=\\\"name\\\"\\n      onChange={(event) => console.info('On input change')}\\n      placeholder=\\\"Placeholder\\\"\\n      type=\\\"text\\\"\\n    />\\n  </Field>\\n  <State initial={false} change={(i) => !i}>\\n    {(value, change) => (\\n      <Field label=\\\"Switch with error\\\">\\n        <Switch isChecked={value} onChange={change} id=\\\"roundOne\\\" variant=\\\"danger\\\" />\\n      </Field>\\n    )}\\n  </State>\\n</Playground>\\n\")), mdx(\"h3\", null, \"Props\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Name\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Type\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Default\"), mdx(\"th\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Description\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"children\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"React.ReactNode\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Trigger element of Popover\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"label\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"React.ReactNode\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Text appeared on the button\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"row\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"boolean\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"The row attribute specifies direction of label and component\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"variant\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"string\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"'secondary'\")), mdx(\"td\", {\n    parentName: \"tr\",\n    \"align\": null\n  }, \"Variant prop to style component\")))));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"pageID":"6b0436a3-e55c-53c3-b93e-e62c457082f4"}},"staticQueryHashes":["1158639554"]}