{"version":3,"sources":["webpack://woly/./src/lib/state-map.tsx","webpack://woly/./src/woly/molecules/input-password/__screenshot-test__/index.tsx"],"names":["Sizes","Priorities","StateMap","key","groupByProp","propVariations","style","render","allVariations","obj","fieldNames","Object","keys","length","_combinations","combinations","restKeys","possibleValues","Array","isArray","Error","fn","variation","map","fieldValue","newAcc","reduce","a","b","concat","createCombinations","groups","entries","all","current","valueAsKey","push","className","groupName","variations","StateMapGroup","data-group-name","variationProps","index","dataProps","result","StateMapVariant","styled","disabled","size","priority","SizeBlock","block","name","placeholder","onChange","console","log","type"],"mappings":"myBAKO,IAAMA,EAAQ,CAAC,IAAK,KAAM,IAAK,IAAK,IAAK,KAAM,KACzCC,EAAa,CAAC,UAAW,UAAW,YAAa,QAAS,SAAU,WAuB1E,SAASC,EAAT,GAKmB,IA8GxBC,EAlHAC,EAIuB,EAJvBA,YACAC,EAGuB,EAHvBA,eACAC,EAEuB,EAFvBA,MACAC,EACuB,EADvBA,OAEMC,EAiER,SAA4BC,GAC1B,IAAMC,EAAaC,OAAOC,KAAKH,GAE/B,GAA0B,IAAtBC,EAAWG,OAAc,MAAO,CAAC,IAErC,SAASC,EAAT,EAEEC,GAC4B,IAF3BZ,EAE0B,KAFlBa,EAEkB,WACrBC,EAAiBR,EAAIN,GAE3B,IAAKe,MAAMC,QAAQF,IAA6C,IAA1BA,EAAeJ,OACnD,MAAM,IAAIO,MAAJ,gEAA0EjB,GAGlF,IAe+BkB,EAfzBC,EAAYL,EAAeM,KAAI,SAACC,GAAD,oBAChCT,GADgC,WAElCZ,GAAMqB,EAF4B,OAKrC,OAAwB,IAApBR,EAASH,OACJS,GASsBD,EANL,SAACI,GAAD,OAAYX,EAAcE,EAAUS,IAA/CH,EAONC,IAAIF,GAAIK,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,OAAOD,OAJ7C,OAAOd,EAAcJ,EAAY,IA5FXoB,CAAmBzB,GACnC0B,EAASpB,OAAOqB,SA4GtB7B,EA5GwDC,EAAfI,EA8G9BkB,QAAO,SAACO,EAAKC,GACtB,IAAMC,EAAU,GAAMD,EAAQ/B,GAO9B,OAJK8B,EAAIE,KACPF,EAAIE,GAAc,IAEpBF,EAAIE,GAAYC,KAAKF,GACdD,IACN,MArHH,OACE,gBAAC,IAAD,KACE,uBAAKI,UAAU,aACZN,EAAOR,KAAI,YAA8B,IAA5Be,EAA2B,KAAhBC,EAAgB,KACvC,OACE,gBAACC,EAAD,CAAerC,IAAKmC,EAAWD,UAAU,mBAAmBI,kBAAiBH,GAC1EC,EAAWhB,KAAI,SAACmB,EAAgBC,GAC/B,IAyFgDlC,EAzF1CmC,GAyF0CnC,EAzFViC,EA0F7C/B,OAAOC,KAAKH,GAAKiB,QAAgC,SAACmB,EAAQ1C,GAG/D,OAFA0C,EAAO,QAAQ1C,GAASM,EAAIN,GAErB0C,IACN,KA5FW,OACE,gBAACC,EAAD,iBAEMF,EAFN,CAGEtC,MAAOA,EAEPH,IAAQmC,EAAL,IAAkBK,EACrBN,UAAU,uBAET9B,EAAOmC,aAY5B,IAAMF,EAAgBO,oBAAH,6BAAGA,CAAH,gEAMbD,EAAkBC,oBAAH,6BAAGA,CAAH,mH,qFCrCrB,UA/B8B,WAC5B,OACE,gBAAC,KAAD,CACE1C,eAAgB,CACd2C,SAAU,EAAC,GAAM,GACjBC,KAAMjD,KACNkD,SAAUjD,MAEZG,YAAY,WACZG,OAAQ,YAAmC,IAAhC0C,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,SAAUF,EAAe,EAAfA,SACnBG,EAAYC,IAAMH,GAExB,OACE,gBAACE,EAAD,KACE,gBAAC,IAAD,CACEd,UAAU,oBACVgB,KAAK,WACLH,SAAUA,EACVF,SAAUA,EACVM,YAAY,WAEZC,SAAUC,QAAQC,IAClBC,KAAK","file":"component---src-woly-molecules-input-password-screenshot-test-index-tsx-3f853935e32148d2ca14.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\n\nimport { Global } from './global';\n\nexport const Sizes = ['N', 'XS', 'S', 'M', 'L', 'XL', 'H'] as const;\nexport const Priorities = ['default', 'primary', 'secondary', 'white', 'danger', 'success'];\n\ntype ArrayElement<\n  ArrayType extends readonly unknown[]\n> = ArrayType extends readonly (infer ElementType)[] ? ElementType : never;\n\ntype ObjectVariations = Record<string, readonly unknown[]>;\n\ntype StateMapRenderProps<Props extends ObjectVariations> = {\n  [Key in keyof Props]: ArrayElement<Props[Key]>;\n};\n\n/**\n * TODO: group by multiple props\n */\n\ninterface StateMapProps<Props extends ObjectVariations> {\n  groupByProp: keyof Props & string;\n  propVariations: Props;\n  render: (variant: StateMapRenderProps<Props>) => React.ReactElement;\n  style?: React.CSSProperties;\n}\n\nexport function StateMap<Props extends ObjectVariations>({\n  groupByProp,\n  propVariations,\n  style,\n  render,\n}: StateMapProps<Props>) {\n  const allVariations = createCombinations(propVariations);\n  const groups = Object.entries(groupByKey(allVariations, groupByProp));\n\n  return (\n    <Global>\n      <div className=\"state-map\">\n        {groups.map(([groupName, variations]) => {\n          return (\n            <StateMapGroup key={groupName} className=\"state-map__group\" data-group-name={groupName}>\n              {variations.map((variationProps, index) => {\n                const dataProps = dataPropsFromObject(variationProps);\n\n                return (\n                  <StateMapVariant\n                    // eslint-disable-next-line react/jsx-props-no-spreading\n                    {...dataProps}\n                    style={style}\n                    // eslint-disable-next-line react/no-array-index-key\n                    key={`${groupName}-${index}`}\n                    className=\"state-map__variant\"\n                  >\n                    {render(variationProps as StateMapRenderProps<Props>)}\n                  </StateMapVariant>\n                );\n              })}\n            </StateMapGroup>\n          );\n        })}\n      </div>\n    </Global>\n  );\n}\n\nconst StateMapGroup = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n`;\n\nconst StateMapVariant = styled.div`\n  position: relative;\n\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  box-sizing: border-box;\n  padding: 1rem;\n`;\n\n// https://github.com/evgenykochetkov/react-storybook-addon-props-combinations/blob/master/src/utils.js\n\n/**\n * Takes an object with a shape of {fieldName: arrayOfPossibleValues}\n * and returns an array of objects with all possible combinations\n * of field values\n *\n * eg: passing {foo: [1, 2], bar: ['a', 'b']} will return\n * [\n *  {foo: 1, bar: \"a\"},\n *  {foo: 1, bar: \"b\"},\n *  {foo: 2, bar: \"a\"},\n *  {foo: 2, bar: \"b\"}\n * ]\n */\n\nfunction createCombinations(obj: ObjectVariations) {\n  const fieldNames = Object.keys(obj);\n\n  if (fieldNames.length === 0) return [{}];\n\n  function _combinations<Combination extends string[]>(\n    [key, ...restKeys]: Combination,\n    combinations: Record<string, unknown[]>,\n  ): Record<string, unknown>[] {\n    const possibleValues = obj[key];\n\n    if (!Array.isArray(possibleValues) || possibleValues.length === 0) {\n      throw new Error(`Please provide a non-empty array of possible values for prop ${key}`);\n    }\n\n    const variation = possibleValues.map((fieldValue) => ({\n      ...combinations,\n      [key]: fieldValue,\n    }));\n\n    if (restKeys.length === 0) {\n      return variation;\n    }\n\n    return flatMap(variation, (newAcc) => _combinations(restKeys, newAcc));\n  }\n\n  return _combinations(fieldNames, {});\n}\n\nfunction flatMap<T>(arr: Array<T>, fn: (value: T, index: number, array: Array<T>) => Array<T>) {\n  return arr.map(fn).reduce((a, b) => a.concat(b));\n}\n\nfunction dataPropsFromObject<O extends Record<string, unknown>>(obj: O) {\n  return Object.keys(obj).reduce<Record<string, unknown>>((result, key) => {\n    result[`data-${key}`] = obj[key];\n\n    return result;\n  }, {});\n}\n\nfunction groupByKey<Variants extends Record<string, unknown>, Key extends keyof Variants>(\n  arr: Variants[],\n  key: Key,\n) {\n  return arr.reduce((all, current) => {\n    const valueAsKey = `${current[key]}`;\n\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (!all[valueAsKey]) {\n      all[valueAsKey] = [];\n    }\n    all[valueAsKey].push(current);\n    return all;\n  }, {} as Record<string, Variants[]>);\n}\n","import React from 'react';\nimport { Priorities, Sizes, StateMap } from 'lib/state-map';\nimport { block } from 'lib/block';\n\nimport { InputPassword } from '..';\n\nconst InputPasswordStateMap = () => {\n  return (\n    <StateMap\n      propVariations={{\n        disabled: [true, false],\n        size: Sizes,\n        priority: Priorities,\n      }}\n      groupByProp=\"priority\"\n      render={({ size, priority, disabled }) => {\n        const SizeBlock = block[size];\n\n        return (\n          <SizeBlock>\n            <InputPassword\n              className=\"input-password-st\"\n              name=\"password\"\n              priority={priority}\n              disabled={disabled}\n              placeholder=\"password\"\n              // eslint-disable-next-line no-console\n              onChange={console.log}\n              type=\"text\"\n            />\n          </SizeBlock>\n        );\n      }}\n    />\n  );\n};\n\nexport default InputPasswordStateMap;\n"],"sourceRoot":""}